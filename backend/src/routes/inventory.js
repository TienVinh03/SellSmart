const express = require("express");
const router = express.Router();
const InventoryController = require("../controllers/InventoryController");
const TypeProductController = require("../controllers/TypeProductController");
const VariantController = require("../controllers/VariantController");
const ProviderController = require("../controllers/ProviderController");
const DetailsVariantController = require("../controllers/DetailsVariantController");
const TypeProduct = require("../models/TypeProduct");
const Inventory = require("../models/Inventory");
const Provider = require("../models/Provider");
const { protect } = require("../middleware/auth");
const mongoose = require("mongoose");

// üöÄ Routes cho Inventory (Qu·∫£n l√Ω kho)
// Route tƒ©nh - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/", async (req, res) => {
    console.log("Y√™u c·∫ßu ƒë·∫øn route /inventory");
    try {
        // Ki·ªÉm tra k·∫øt n·ªëi MongoDB tr∆∞·ªõc
        const db = mongoose.connection;
        if (db.readyState !== 1) {
            console.error("MongoDB connection is not ready");
            return res.status(500).json({ 
                status: "Error",
                message: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu" 
            });
        }

        // L·∫•y d·ªØ li·ªáu v·ªõi Promise.all ƒë·ªÉ x·ª≠ l√Ω song song
        const [typeProducts, providers, inventories] = await Promise.all([
            TypeProduct.find().populate("variants").lean(),
            Provider.find().lean(),
            Inventory.find()
                .populate("typeProduct_id")
                .populate("provider_id")
                .lean()
        ]);
            
        res.render("dashboard/inventory", {
            title: "Qu·∫£n l√Ω nh·∫≠p kho",
            page: "inventory",
            typeProducts,
            providers,
            inventories,
            admin: {
                fullName: req.user?.fullName || 'Admin',
                avatar: req.user?.avatar || null
            },
            user: {
                fullName: req.user?.fullName || 'Admin',
                avatar: req.user?.avatar || null
            }
        });
    } catch (error) {
        console.error("Error loading inventory page:", error);
        // Ki·ªÉm tra lo·∫°i l·ªói
        if (error.name === 'MongoError' || error.name === 'MongoServerError') {
            return res.status(500).json({ 
                status: "Error",
                message: "L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau." 
            });
        } else if (error.name === 'ValidationError') {
            return res.status(400).json({ 
                status: "Error",
                message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" 
            });
        } else {
            return res.status(500).json({ 
                status: "Error",
                message: "L·ªói khi t·∫£i trang qu·∫£n l√Ω kho" 
            });
        }
    }
});

// Route l·∫•y danh s√°ch s·∫£n ph·∫©m trong kho (JSON) - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/json", InventoryController.getInventoryList);

// API endpoint cho mobile app - L·∫•y s·∫£n ph·∫©m c√≥ s·∫µn
router.get("/available", async (req, res) => {
    try {
        console.log("=== B·∫Øt ƒë·∫ßu l·∫•y danh s√°ch kho c√≥ s·∫µn cho API ===");

        // L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ database v·ªõi status="available"
        const inventories = await Inventory.find({ status: "available" })
            .populate({ path: "typeProduct_id", select: "name" })
            .populate({ path: "provider_id", select: "fullName" })
            .sort({ createdAt: -1 })
            .lean();

        console.log(`T√¨m th·∫•y ${inventories.length} s·∫£n ph·∫©m c√≥ s·∫µn`);

        return res.json({
            success: true,
            data: inventories
        });
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch kho c√≥ s·∫µn:", error);
        res.status(500).json({
            success: false,
            message: `L·ªói server: ${error.message}`,
        });
    }
});

// Route l·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m duy nh·∫•t ƒë·ªÉ nh·∫≠p l√¥ h√†ng m·ªõi
router.get("/products-for-batch", InventoryController.getProductsForBatch);

// Route l·∫•y m√£ s·∫£n ph·∫©m cu·ªëi c√πng - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/last-code", async (req, res) => {
    try {
        const lastInventory = await Inventory.findOne().sort({ product_code: -1 });
        res.json({
            status: 'Ok',
            data: lastInventory ? lastInventory.product_code : null
        });
    } catch (error) {
        console.error('Error getting last product code:', error);
        res.status(500).json({
            status: 'Error',
            message: 'L·ªói khi l·∫•y m√£ s·∫£n ph·∫©m cu·ªëi c√πng'
        });
    }
});

// Route l·∫•y danh s√°ch s·∫£n ph·∫©m theo l√¥ h√†ng - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/batch/:batch_number", InventoryController.getInventoryByBatch);

// Route nh·∫≠p l√¥ h√†ng m·ªõi
router.post("/batch-import", InventoryController.importInventory);

// Route nh·∫≠p l√¥ h√†ng ti·∫øp theo
router.post("/next-batch", async (req, res) => {
    try {
        const { batchInfo, products } = req.body;

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!batchInfo || !batchInfo.batch_number || !batchInfo.import_date ||
            !products || !Array.isArray(products) || products.length === 0) {
            return res.status(400).json({
                status: "Error",
                message: "Thi·∫øu th√¥ng tin l√¥ h√†ng ho·∫∑c s·∫£n ph·∫©m",
                errors: [],
                results: []
            });
        }

        const results = [];
        const errors = [];

        // X·ª≠ l√Ω t·ª´ng s·∫£n ph·∫©m trong l√¥ h√†ng
        for (const product of products) {
            try {
                // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
                if (!product.product_id) {
                    errors.push(`Thi·∫øu product_id`);
                    continue;
                }
                if (!Number.isFinite(product.price) || product.price < 0) {
                    errors.push(`Gi√° kh√¥ng h·ª£p l·ªá cho s·∫£n ph·∫©m ${product.product_id}`);
                    continue;
                }
                if (!Number.isFinite(product.quantity) || product.quantity < 1) {
                    errors.push(`S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá cho s·∫£n ph·∫©m ${product.product_id}`);
                    continue;
                }

                // T√¨m s·∫£n ph·∫©m hi·ªán c√≥
                const existingProduct = await Inventory.findById(product.product_id);
                if (!existingProduct) {
                    errors.push(`Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: ${product.product_id}`);
                    continue;
                }

                // N·∫øu s·∫£n ph·∫©m c√≥ bi·∫øn th·ªÉ
                if (existingProduct.hasVariants) {
                    if (!product.variantData || !Number.isFinite(product.variantData.index) || product.variantData.index < 0) {
                        errors.push(`D·ªØ li·ªáu bi·∫øn th·ªÉ kh√¥ng h·ª£p l·ªá cho s·∫£n ph·∫©m: ${existingProduct.product_name}`);
                        continue;
                    }

                    // C·∫≠p nh·∫≠t th√¥ng tin cho bi·∫øn th·ªÉ ƒë∆∞·ª£c ch·ªçn
                    const variant = existingProduct.variantDetails[product.variantData.index];
                    if (!variant) {
                        errors.push(`Bi·∫øn th·ªÉ kh√¥ng h·ª£p l·ªá cho s·∫£n ph·∫©m: ${existingProduct.product_name}`);
                        continue;
                    }

                    // Ki·ªÉm tra attributes c·ªßa bi·∫øn th·ªÉ
                    if (!product.variantData.attributes || typeof product.variantData.attributes !== 'object') {
                        errors.push(`Thu·ªôc t√≠nh bi·∫øn th·ªÉ kh√¥ng h·ª£p l·ªá cho s·∫£n ph·∫©m: ${existingProduct.product_name}`);
                        continue;
                    }
                    const variantAttributes = Object.fromEntries(variant.attributes);
                    const inputAttributes = product.variantData.attributes;
                    if (Object.keys(variantAttributes).length !== Object.keys(inputAttributes).length ||
                        !Object.keys(variantAttributes).every(key => variantAttributes[key] === inputAttributes[key])) {
                        errors.push(`Thu·ªôc t√≠nh bi·∫øn th·ªÉ kh√¥ng kh·ªõp cho s·∫£n ph·∫©m: ${existingProduct.product_name}`);
                        continue;
                    }

                    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng v√† gi√° cho bi·∫øn th·ªÉ
                    variant.quantity = (variant.quantity || 0) + product.quantity;
                    variant.price = product.price; // Gi√° nh·∫≠p m·ªõi nh·∫•t

                    // C·∫≠p nh·∫≠t t·ªïng s·ªë l∆∞·ª£ng v√† t·ªïng gi√° cho s·∫£n ph·∫©m
                    existingProduct.total_quantity = existingProduct.variantDetails.reduce((sum, v) => sum + (v.quantity || 0), 0);
                    const totalValue = existingProduct.variantDetails.reduce((sum, v) => sum + (v.price * (v.quantity || 0)), 0);
                    existingProduct.total_price = existingProduct.total_quantity > 0 ? totalValue / existingProduct.total_quantity : 0;
                } else {
                    // C·∫≠p nh·∫≠t cho s·∫£n ph·∫©m kh√¥ng c√≥ bi·∫øn th·ªÉ
                    const oldTotalValue = (existingProduct.total_price || 0) * (existingProduct.total_quantity || 0);
                    const newTotalValue = product.price * product.quantity;
                    const totalQuantity = (existingProduct.total_quantity || 0) + product.quantity;
                    const averagePrice = totalQuantity > 0 ? (oldTotalValue + newTotalValue) / totalQuantity : product.price;

                    existingProduct.total_quantity = totalQuantity;
                    existingProduct.total_price = averagePrice;
                }

                // Th√™m th√¥ng tin l√¥ h√†ng m·ªõi
                existingProduct.batch_info.push({
                    batch_number: batchInfo.batch_number,
                    batch_date: new Date(batchInfo.import_date),
                    quantity: product.quantity,
                    price: product.price,
                    note: batchInfo.note || ''
                });

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i
                existingProduct.status = existingProduct.total_quantity > 0 ? 'available' : 'unavailable';

                // L∆∞u thay ƒë·ªïi
                await existingProduct.save();
                results.push({
                    product_name: existingProduct.product_name,
                    status: "Success"
                });
            } catch (error) {
                console.error(`L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m ${product.product_id}:`, error);
                errors.push(`L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m ${product.product_id}: ${error.message}`);
            }
        }

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£
        if (errors.length > 0) {
            return res.status(400).json({
                status: "Error",
                message: "C√≥ l·ªói x·∫£y ra khi nh·∫≠p l√¥ h√†ng",
                errors,
                results
            });
        }

        res.status(200).json({
            status: "Ok",
            message: "Nh·∫≠p l√¥ h√†ng th√†nh c√¥ng",
            data: results
        });
    } catch (error) {
        console.error("L·ªói khi nh·∫≠p l√¥ h√†ng:", error);
        res.status(500).json({
            status: "Error",
            message: "L·ªói khi nh·∫≠p l√¥ h√†ng: " + error.message,
            errors: [error.message],
            results: []
        });
    }
});

// Route th√™m s·∫£n ph·∫©m m·ªõi v√†o kho - Kh√¥ng y√™u c·∫ßu x√°c th·ª±c ƒë·ªÉ d·ªÖ test
router.post("/create", InventoryController.importInventory);

// Route c·∫≠p nh·∫≠t s·∫£n ph·∫©m trong kho - Y√™u c·∫ßu x√°c th·ª±c
router.put("/update/:id", protect, InventoryController.updateInventory);

// Route x√≥a s·∫£n ph·∫©m kh·ªèi kho - Y√™u c·∫ßu x√°c th·ª±c
router.delete("/delete/:id", protect, InventoryController.deleteInventory);

// üöÄ Routes cho TypeProduct (Danh m·ª•c s·∫£n ph·∫©m) - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/typeproduct/json", TypeProductController.getTypesAsJson);

// üöÄ Routes cho Variant (Bi·∫øn th·ªÉ) - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/variants/json", VariantController.getVariantsAsJson);
router.get("/typeproduct/:id/variants", VariantController.getVariantsAsJson);

// üöÄ Routes cho DetailsVariant (Chi ti·∫øt bi·∫øn th·ªÉ) - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/variant/:id/details", DetailsVariantController.getDetailsByProduct);

// Route ƒë·ªông (ƒë·∫∑t sau c√°c route tƒ©nh) - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/:id", InventoryController.getInventoryDetail);

module.exports = router;