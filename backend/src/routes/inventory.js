const express = require("express");
const router = express.Router();
const InventoryController = require("../controllers/InventoryController");
const TypeProductController = require("../controllers/TypeProductController");
const VariantController = require("../controllers/VariantController");
const ProviderController = require("../controllers/ProviderController");
const DetailsVariantController = require("../controllers/DetailsVariantController");
const TypeProduct = require("../models/TypeProduct");
const Inventory = require("../models/Inventory");
const Provider = require("../models/Provider");
const { protect } = require("../middleware/auth");

// üöÄ Routes cho Inventory (Qu·∫£n l√Ω kho)
// Route tƒ©nh - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/", async (req, res) => {
    console.log("Y√™u c·∫ßu ƒë·∫øn route /inventory"); // Th√™m log ƒë·ªÉ ki·ªÉm tra
    try {
        const typeProducts = await TypeProduct.find().populate("variants");
        const providers = await Provider.find();
        const inventories = await Inventory.find()
            .populate("typeProduct_id")
            .populate("provider_id");
            
        res.render("dashboard/inventory", {
            title: "Qu·∫£n l√Ω nh·∫≠p kho",
            page: "inventory",
            typeProducts,
            providers,
            inventories,
            admin: {
                fullName: req.user?.fullName || 'Admin',
                avatar: req.user?.avatar || null
            },
            user: {
                fullName: req.user?.fullName || 'Admin',
                avatar: req.user?.avatar || null
            }
        });
    } catch (error) {
        console.error("Error loading inventory page:", error);
        res.status(500).json({ message: "L·ªói khi t·∫£i trang qu·∫£n l√Ω kho" });
    }
});

// Route l·∫•y danh s√°ch s·∫£n ph·∫©m trong kho (JSON) - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/json", InventoryController.getInventoryList);

// Route l·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m duy nh·∫•t ƒë·ªÉ nh·∫≠p l√¥ h√†ng m·ªõi
router.get("/products-for-batch", InventoryController.getProductsForBatch);

// Route l·∫•y m√£ s·∫£n ph·∫©m cu·ªëi c√πng - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/last-code", async (req, res) => {
    try {
        const lastInventory = await Inventory.findOne().sort({ product_code: -1 });
        res.json({
            status: 'Ok',
            data: lastInventory ? lastInventory.product_code : null
        });
    } catch (error) {
        console.error('Error getting last product code:', error);
        res.status(500).json({
            status: 'Error',
            message: 'L·ªói khi l·∫•y m√£ s·∫£n ph·∫©m cu·ªëi c√πng'
        });
    }
});

// Route l·∫•y danh s√°ch s·∫£n ph·∫©m theo l√¥ h√†ng - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/batch/:batch_number", InventoryController.getInventoryByBatch);

// Route nh·∫≠p l√¥ h√†ng m·ªõi
router.post("/batch-import", InventoryController.importInventory);

// Route nh·∫≠p l√¥ h√†ng ti·∫øp theo
router.post("/next-batch", InventoryController.importInventory);

// Route th√™m s·∫£n ph·∫©m m·ªõi v√†o kho - Kh√¥ng y√™u c·∫ßu x√°c th·ª±c ƒë·ªÉ d·ªÖ test
router.post("/create", InventoryController.importInventory);

// Route c·∫≠p nh·∫≠t s·∫£n ph·∫©m trong kho - Y√™u c·∫ßu x√°c th·ª±c
router.put("/update/:id", protect, InventoryController.updateInventory);

// Route x√≥a s·∫£n ph·∫©m kh·ªèi kho - Y√™u c·∫ßu x√°c th·ª±c
router.delete("/delete/:id", protect, InventoryController.deleteInventory);

// üöÄ Routes cho TypeProduct (Danh m·ª•c s·∫£n ph·∫©m) - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/typeproduct/json", TypeProductController.getTypesAsJson);

// üöÄ Routes cho Variant (Bi·∫øn th·ªÉ) - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/variants/json", VariantController.getVariantsAsJson);
router.get("/typeproduct/:id/variants", VariantController.getVariantsAsJson);

// üöÄ Routes cho DetailsVariant (Chi ti·∫øt bi·∫øn th·ªÉ) - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/variant/:id/details", DetailsVariantController.getDetailsByProduct);

// Route ƒë·ªông (ƒë·∫∑t sau c√°c route tƒ©nh) - Kh√¥ng c·∫ßn x√°c th·ª±c
router.get("/:id", InventoryController.getInventoryDetail);

module.exports = router;