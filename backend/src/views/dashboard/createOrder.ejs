<%- include('../layouts/main.ejs') %>
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>T·∫°o ƒê∆°n H√†ng</title>
  
    <script>
     function validateOrderData() {
    let customerID = document.getElementById("customerID").value;
    let customerName = document.getElementById("customerName").value;
    let customerPhone = document.getElementById("customerPhone").value;
    let customerEmail = document.getElementById("customerEmail").value;
    let customerAddress = document.getElementById("customerAddress").value;
    let shippingNotes = document.getElementById("shippingNotes").value;

    // Validation checks...
    if (!customerID) {
        alert("Vui l√≤ng ch·ªçn kh√°ch h√†ng t·ª´ danh s√°ch!");
        return false;
    }

    if (!customerName || !customerPhone || !customerEmail || !customerAddress) {
        alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin kh√°ch h√†ng!");
        return false;
    }

    if (selectedProducts.length === 0) {
        alert("B·∫°n c·∫ßn ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m!");
        return false;
    }

    // Calculate final total amount (with or without promotion)
    let totalAmount = parseFloat(document.getElementById("totalAmount").innerText.replace(/[^\d]/g, '')) || 0;

    return {
        customerID,
        products: selectedProducts.map(p => ({
            productID: p.productID,
            name: p.name,
            inventory: p.inventory,
            price: p.price,
            quantity: p.quantity,
            attributes: Object.entries(p.attributes).map(([key, value]) => ({
                name: key,
                value: [value]
            }))
        })),
        totalAmount: totalAmount,
        paymentMethod: 'cash',
        shippingAddress: "Nh·∫≠n t·∫°i c·ª≠a h√†ng",
        notes: shippingNotes || "",
        promotionID: selectedPromotion ? selectedPromotion.id : null
    };
}


function createOrder() {
    let orderData = validateOrderData();
    if (!orderData) return;

    fetch("http://localhost:3000/orders", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(orderData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
            window.location.href = "http://localhost:3000/orders"; // Chuy·ªÉn v·ªÅ danh s√°ch ƒë∆°n h√†ng
        } else {
            alert("C√≥ l·ªói khi t·∫°o ƒë∆°n h√†ng: " + data.message);
        }
    })
    .catch(error => console.error("L·ªói:", error));
}

let selectedProducts = [];
let selectedAttributes = {}; // L∆∞u c√°c thu·ªôc t√≠nh ƒë√£ ch·ªçn c·ªßa s·∫£n ph·∫©m

function openProductDialog() {
    // Reset tr∆∞·ªùng t√¨m ki·∫øm
    const searchInput = document.getElementById('productSearchInput');
    if (searchInput) {
        searchInput.value = '';
    }
    
    // Fetch detailed product information
    fetch("/products/json")
        .then(response => response.json())
        .then(result => {
            if (result.status === 'Ok') {
                const productTableBody = document.getElementById('productTableBody');
                productTableBody.innerHTML = ''; // Clear existing rows

                result.data.forEach(product => {
                    // Prepare variant display and attribute processing
                    let processedAttributes = [];
                    
                    // Process variants if the product has variants
                    if (product.hasVariants && product.variants && product.variants.length > 0) {
                        // Create a map to store unique attributes
                        const attributeGroups = {};
                        
                        // Iterate through variant details of the first variant
                        product.variants[0].variantDetails.forEach(detail => {
                            // Use the variant name directly from the variant ID
                            const variantName = detail.variantId;
                            
                            // Collect unique values for each variant
                            if (!attributeGroups[variantName]) {
                                attributeGroups[variantName] = new Set();
                            }
                            attributeGroups[variantName].add(detail.value);
                        });

                        // Convert to the required format
                        processedAttributes = Object.entries(attributeGroups).map(([name, values]) => ({
                            name,
                            values: Array.from(values)
                        }));
                    }

                    // Determine price and inventory (using first variant if multiple exist)
                    const price = product.variants && product.variants.length > 0 
                        ? product.variants[0].price 
                        : product.price;

                    const inventory = product.variants && product.variants.length > 0 
                        ? product.variants[0].inventory 
                        : product.inventory;

                    const row = `
                        <tr class="product-row">
                            <td><img src="${product.thumbnail || 'https://via.placeholder.com/50'}" width="50"></td>
                            <td class="product-name">${product.name}</td>
                            <td>
                                <span id="selected-attributes-${product._id}">
                                    ${product.hasVariants ? 'Ch∆∞a ch·ªçn' : 'Kh√¥ng c√≥ bi·∫øn th·ªÉ'}
                                </span>
                                ${product.hasVariants ? `
                                    <button type="button" class="small-btn" 
                                        onclick='openAttributeDialog("${product._id}", "${product.name}", ${JSON.stringify(processedAttributes)})'>
                                        üõ†Ô∏è
                                    </button>
                                ` : ''}
                            </td>
                            <td>${(price || 0).toLocaleString()} VND</td>
                            <td>${inventory || 0}</td>
                            <td>
                                <input type="checkbox" id="productCheckbox-${product._id}" 
                                ${product.hasVariants ? 'disabled' : ''} 
                                onchange="toggleProductSelection(this, '${product._id}', '${product.name}', '${price}', '${product.thumbnail}', '${inventory}', decodeURIComponent('${encodeURIComponent(JSON.stringify(processedAttributes))}'))">
                            </td>
                        </tr>
                    `;
                    productTableBody.innerHTML += row;
                });

                // Reset checkbox states and selections
                selectedAttributes = {};
                document.getElementById("productDialog").style.display = "block";
            } else {
                alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m!");
            }
        })
        .catch(error => {
            console.error("L·ªói khi t·∫£i s·∫£n ph·∫©m:", error);
            alert("C√≥ l·ªói x·∫£y ra khi t·∫£i s·∫£n ph·∫©m!");
        });
}

function closeProductDialog() {
    // Reset t·∫•t c·∫£ d·ªØ li·ªáu thu·ªôc t√≠nh ƒë√£ ch·ªçn khi ƒë√≥ng dialog ch·ªçn s·∫£n ph·∫©m
    selectedAttributes = {};
    document.getElementById("productDialog").style.display = "none";

    // Reset checkbox s·∫£n ph·∫©m v√† disable l·∫°i
    document.querySelectorAll("input[type=checkbox][id^=productCheckbox]").forEach(checkbox => {
        checkbox.checked = false;
        checkbox.disabled = true;
    });

    // Reset hi·ªÉn th·ªã thu·ªôc t√≠nh
    document.querySelectorAll("[id^=selected-attributes]").forEach(span => {
        span.innerText = "Ch∆∞a ch·ªçn";
    });
}

function openAttributeDialog(productID, productName, attributes) {
    // Validate attributes
    if (!Array.isArray(attributes) || attributes.length === 0) {
        alert("Kh√¥ng c√≥ thu·ªôc t√≠nh ƒë·ªÉ ch·ªçn!");
        return;
    }

    let attributeDiv = document.getElementById("attributeOptions");
    attributeDiv.innerHTML = `<h4>Ch·ªçn thu·ªôc t√≠nh cho <b>${productName}</b></h4>`;

    document.getElementById("attributeDialog").dataset.productId = productID;
    document.getElementById("attributeDialog").dataset.attributes = JSON.stringify(attributes);

    // Create a container to track selected values for each attribute
    let currentSelections = {};

    attributes.forEach(attribute => {
        // Get the variant name (attribute name)
        const variantName = attribute.name;

        // Create a section for this attribute
        let attributeSection = document.createElement('div');
        attributeSection.classList.add('attribute-group');
        
        // Add attribute name
        let nameElement = document.createElement('h5');
        nameElement.textContent = variantName;
        attributeSection.appendChild(nameElement);

        // Create a container for checkboxes
        let checkboxContainer = document.createElement('div');
        checkboxContainer.classList.add('checkbox-container');

        // Create checkboxes for each variant value
        attribute.values.forEach(value => {
            let label = document.createElement('label');
            label.classList.add('checkbox-label');

            let checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.name = `attr-${productID}-${variantName}`;
            checkbox.value = value;

            // Add event listener to handle single selection per attribute
            checkbox.addEventListener('change', function() {
                // Uncheck other checkboxes in the same group
                document.querySelectorAll(`input[name="${checkbox.name}"]`).forEach(cb => {
                    if (cb !== checkbox) cb.checked = false;
                });

                // Update current selections
                if (this.checked) {
                    currentSelections[variantName] = this.value;
                } else {
                    delete currentSelections[variantName];
                }

                // Check if all attributes have a selection
                const allAttributesSelected = attributes.every(attr => 
                    currentSelections[attr.name]
                );

                // Enable/disable save button based on selections
                document.getElementById('saveAttributesBtn').disabled = !allAttributesSelected;
            });

            label.appendChild(checkbox);
            label.appendChild(document.createTextNode(value));
            
            checkboxContainer.appendChild(label);
        });

        attributeSection.appendChild(checkboxContainer);
        attributeDiv.appendChild(attributeSection);
    });

    // Create save button with initial disabled state
    let saveButton = document.createElement('button');
    saveButton.id = 'saveAttributesBtn';
    saveButton.textContent = 'L∆∞u thu·ªôc t√≠nh';
    saveButton.classList.add('btn', 'btn-primary');
    saveButton.disabled = true;
    saveButton.onclick = () => saveAttributeSelection();

    attributeDiv.appendChild(saveButton);

    // Show the dialog
    document.getElementById("attributeDialog").style.display = "block";
}

function closeAttributeDialog() {
    document.getElementById("attributeDialog").style.display = "none";
}

function updateAttributeSelection(productID, attributeName, value, checkbox) {
    if (!selectedAttributes[productID]) {
        selectedAttributes[productID] = {};
    }

    // H·ªßy ch·ªçn t·∫•t c·∫£ checkbox kh√°c trong nh√≥m
    document.querySelectorAll(`input[name="attr-${productID}-${attributeName}"]`).forEach(cb => {
        if (cb !== checkbox) cb.checked = false;
    });

    selectedAttributes[productID][attributeName] = value;

    // Ki·ªÉm tra n·∫øu ƒë√£ ch·ªçn ƒë·ªß thu·ªôc t√≠nh -> b·∫≠t checkbox s·∫£n ph·∫©m
    checkAndEnableProductCheckbox(productID);
}

function checkAttributesSelected(productID, attributes) {
    let selectedValues = selectedAttributes[productID] || {};
    return attributes.every(attr => selectedValues[attr.name]);
}

function checkAndEnableProductCheckbox(productID) {
    let attributes = JSON.parse(document.getElementById("attributeDialog").dataset.attributes);
    let checkbox = document.getElementById(`productCheckbox-${productID}`);

    if (checkAttributesSelected(productID, attributes)) {
        checkbox.disabled = false; // B·∫≠t checkbox khi ƒë√£ ch·ªçn ƒë·ªß thu·ªôc t√≠nh
    } else {
        checkbox.disabled = true; // V√¥ hi·ªáu h√≥a n·∫øu ch∆∞a ch·ªçn ƒë·ªß
    }
}

function findMatchingVariant(attributes, selectedAttributes) {
    // Validate input parameters
    if (!Array.isArray(attributes) || !selectedAttributes || typeof selectedAttributes !== 'object') {
        console.error('Invalid input to findMatchingVariant', { attributes, selectedAttributes });
        return null;
    }

    // Ki·ªÉm tra xem product c√≥ variants kh√¥ng
    if (attributes.length === 0) {
        return null;
    }

    // Find the first variant that matches all selected attributes
    const matchingVariant = attributes[0]; // L·∫•y variant ƒë·∫ßu ti√™n

    // Ki·ªÉm tra n·∫øu variant kh√¥ng c√≥ variantDetails
    if (!matchingVariant.variantDetails || !Array.isArray(matchingVariant.variantDetails)) {
        console.error('Invalid variant structure', matchingVariant);
        return null;
    }

    // Ki·ªÉm tra xem t·∫•t c·∫£ c√°c thu·ªôc t√≠nh ƒë√£ ch·ªçn c√≥ kh·ªõp v·ªõi variant kh√¥ng
    const isMatchingVariant = matchingVariant.variantDetails.every(detail => {
        // L·∫•y t√™n thu·ªôc t√≠nh t·ª´ variantDetails
        const attributeName = detail.variantId ? detail.name || 'Thu·ªôc t√≠nh' : 'Thu·ªôc t√≠nh';
        
        // Ki·ªÉm tra xem thu·ªôc t√≠nh ƒë√£ ƒë∆∞·ª£c ch·ªçn ch∆∞a
        const selectedValue = selectedAttributes[attributeName];
        
        // So s√°nh gi√° tr·ªã
        return selectedValue === detail.value;
    });

    return isMatchingVariant ? matchingVariant : null;
}
function toggleProductSelection(checkbox, productID, name, price, thumbnail, inventory, attributesJSON) {
    let attributes;
    try {
        // Ki·ªÉm tra v√† parse JSON
        attributes = JSON.parse(decodeURIComponent(attributesJSON));
        
        // Validate attributes
        if (!Array.isArray(attributes)) {
            throw new Error('Attributes must be an array');
        }
    } catch (e) {
        console.error("L·ªói parse JSON:", e);
        alert("C√≥ l·ªói khi x·ª≠ l√Ω thu·ªôc t√≠nh s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i.");
        checkbox.checked = false;
        return;
    }

    // X·ª≠ l√Ω c√°c s·∫£n ph·∫©m c√≥ bi·∫øn th·ªÉ
    if (attributes.length > 0) {
        const selectedProductAttributes = selectedAttributes[productID];
        
        // Ki·ªÉm tra xem ƒë√£ ch·ªçn ƒë·ªß thu·ªôc t√≠nh ch∆∞a
        if (!selectedProductAttributes || 
            Object.keys(selectedProductAttributes).length !== attributes.length) {
            alert("B·∫°n c·∫ßn ch·ªçn ƒë·∫ßy ƒë·ªß c√°c thu·ªôc t√≠nh tr∆∞·ªõc khi ch·ªçn s·∫£n ph·∫©m!");
            checkbox.checked = false;
            return;
        }
    }

    let productIndex = selectedProducts.findIndex(p => p.productID === productID);
    if (checkbox.checked) {
        if (productIndex === -1) {
            // T√¨m variant ph√π h·ª£p
            const matchingVariant = findMatchingVariant(
                attributes, 
                selectedAttributes[productID]
            );

            // Ch·ªçn gi√° v√† s·ªë l∆∞·ª£ng
            const selectedPrice = matchingVariant ? matchingVariant.price : Number(price);
            const selectedInventory = matchingVariant ? matchingVariant.inventory : Number(inventory);

            selectedProducts.push({
                productID,
                name,
                price: selectedPrice,
                thumbnail,
                inventory: selectedInventory,
                quantity: 1, 
                attributes: selectedAttributes[productID] || {}
            });
        }
    } else {
        if (productIndex !== -1) {
            selectedProducts.splice(productIndex, 1);
        }
    }
}

function saveSelectedProducts() {
    updateSelectedProductsTable();
    closeProductDialog();
}

function updateSelectedProductsTable() {
    let productTable = document.getElementById("selectedProducts");
    productTable.innerHTML = "";

    let totalAmount = 0;

    selectedProducts.forEach((product, index) => {
        let totalPrice = product.price * product.quantity;
        totalAmount += totalPrice;

        let attributesText = Object.entries(product.attributes || {})
            .map(([key, value]) => `${key}: ${value}`)
            .join(', ') || "Ch∆∞a ch·ªçn";

        productTable.innerHTML += `
            <tr>
                <td><img src="${product.thumbnail}" width="50"></td>
                <td>${product.name}</td>
                <td>${attributesText}</td>
                <td>${product.inventory}</td>
                <td>${product.price.toLocaleString()} VND</td>
                <td>
                    <input type="number" value="${product.quantity}" min="1" max="${product.inventory}" 
                           onchange="updateQuantity(${index}, this.value)" style="width: 60px;">
                </td>
                <td>${totalPrice.toLocaleString()} VND</td>
                <td><button class="delete-btn" onclick="removeProduct(${index}, '${product.productID}')">‚ùå</button></td>
            </tr>
        `;
    });

    // Store original total before discount
    originalTotalAmount = totalAmount;
    
    // If a promotion is selected, reapply it
    if (selectedPromotion) {
        // Check if order still meets minimum value
        if (totalAmount < selectedPromotion.minOrderValue) {
            alert(`ƒê∆°n h√†ng kh√¥ng c√≤n ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªÉ √°p d·ª•ng khuy·∫øn m√£i "${selectedPromotion.name}". Khuy·∫øn m√£i ƒë√£ b·ªã g·ª° b·ªè.`);
            removePromotion();
        } else {
            // Recalculate discount
            let discountAmount = (totalAmount * selectedPromotion.discount) / 100;
            
            // Cap at maximum discount
            if (discountAmount > selectedPromotion.maxDiscount) {
                discountAmount = selectedPromotion.maxDiscount;
            }
            
            // Update UI with discounted total
            document.getElementById("discountAmount").innerText = discountAmount.toLocaleString() + " VND";
            document.getElementById("totalAmount").innerText = (totalAmount - discountAmount).toLocaleString() + " VND";
            return;
        }
    }
    
    // If no promotion or promotion was removed, show original total
    document.getElementById("totalAmount").innerText = totalAmount.toLocaleString() + " VND";
}

function updateQuantity(index, quantity) {
    selectedProducts[index].quantity = parseInt(quantity);
    updateSelectedProductsTable();
}

function removeProduct(index, productID) {
    selectedProducts.splice(index, 1);
    delete selectedAttributes[productID]; // X√≥a thu·ªôc t√≠nh ƒë√£ ch·ªçn c·ªßa s·∫£n ph·∫©m ƒë√≥
    updateSelectedProductsTable();

    // Reset checkbox trong dialog ch·ªçn s·∫£n ph·∫©m
    let productCheckbox = document.getElementById(`productCheckbox-${productID}`);
    if (productCheckbox) {
        productCheckbox.checked = false;
        productCheckbox.disabled = true;
    }

    // Reset hi·ªÉn th·ªã thu·ªôc t√≠nh
    let attributeSpan = document.getElementById(`selected-attributes-${productID}`);
    if (attributeSpan) {
        attributeSpan.innerText = "Ch∆∞a ch·ªçn";
    }
}

function saveAttributeSelection() {
    const productID = document.getElementById("attributeDialog").dataset.productId;
    const attributes = JSON.parse(document.getElementById("attributeDialog").dataset.attributes);

    // Collect selected values
    let selectedValues = {};
    let allAttributesSelected = true;

    attributes.forEach(attribute => {
        const attributeName = attribute.name;
        const selectedValue = document.querySelector(`input[name="attr-${productID}-${attributeName}"]:checked`);

        if (selectedValue) {
            selectedValues[attributeName] = selectedValue.value;
        } else {
            allAttributesSelected = false;
        }
    });

    // Validate all attributes are selected
    if (!allAttributesSelected) {
        alert("Vui l√≤ng ch·ªçn ƒë·ªß t·∫•t c·∫£ c√°c thu·ªôc t√≠nh!");
        return;
    }

    // Update selected attributes display
    const displaySpan = document.getElementById(`selected-attributes-${productID}`);
    const displayText = Object.entries(selectedValues)
        .map(([name, value]) => `${name}: ${value}`)
        .join(', ');
    
    displaySpan.textContent = displayText;

    // Enable product checkbox
    const productCheckbox = document.getElementById(`productCheckbox-${productID}`);
    productCheckbox.disabled = false;

    // Store selected attributes
    if (!selectedAttributes[productID]) {
        selectedAttributes[productID] = {};
    }
    selectedAttributes[productID] = selectedValues;

    // Close the dialog
    document.getElementById("attributeDialog").style.display = "none";
}

function filterProducts() {
    // L·∫•y gi√° tr·ªã t√¨m ki·∫øm (v√† chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng ƒë·ªÉ so s√°nh kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng)
    const searchTerm = document.getElementById('productSearchInput').value.trim().toLowerCase();
    
    // L·∫•y t·∫•t c·∫£ c√°c d√≤ng s·∫£n ph·∫©m
    const productRows = document.querySelectorAll('.product-row');
    
    // Kh·ªüi t·∫°o bi·∫øn ƒë·∫øm s·∫£n ph·∫©m hi·ªÉn th·ªã
    let visibleProductCount = 0;
    
    // L·∫∑p qua t·ª´ng d√≤ng ƒë·ªÉ ki·ªÉm tra
    productRows.forEach(row => {
        // L·∫•y t√™n s·∫£n ph·∫©m t·ª´ c·ªôt t√™n (ph·∫ßn t·ª≠ c√≥ class 'product-name')
        const productNameElement = row.querySelector('.product-name');
        const productName = productNameElement ? productNameElement.textContent.toLowerCase() : '';
        
        // Ki·ªÉm tra xem t√™n s·∫£n ph·∫©m c√≥ ch·ª©a chu·ªói t√¨m ki·∫øm kh√¥ng
        if (productName.includes(searchTerm)) {
            // N·∫øu c√≥, hi·ªÉn th·ªã d√≤ng
            row.style.display = '';
            visibleProductCount++;
        } else {
            // N·∫øu kh√¥ng, ·∫©n d√≤ng
            row.style.display = 'none';
        }
    });
    
    // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p
    const noProductsMessage = document.getElementById('noProductsMessage');
    if (visibleProductCount === 0) {
        noProductsMessage.style.display = 'block';
    } else {
        noProductsMessage.style.display = 'none';
    }
}
function openCustomerDialog() {
    // Reset tr∆∞·ªùng t√¨m ki·∫øm
    const searchInput = document.getElementById('customerSearchInput');
    if (searchInput) {
        searchInput.value = '';
    }
    
    // Hi·ªÉn th·ªã l·∫°i t·∫•t c·∫£ c√°c kh√°ch h√†ng
    const customerRows = document.querySelectorAll('.customer-row');
    customerRows.forEach(row => {
        row.style.display = '';
    });
    
    // ·∫®n th√¥ng b√°o kh√¥ng t√¨m th·∫•y kh√°ch h√†ng
    const noCustomersMessage = document.getElementById('noCustomersMessage');
    if (noCustomersMessage) {
        noCustomersMessage.style.display = 'none';
    }
    
    // Hi·ªÉn th·ªã dialog
    document.getElementById("customerDialog").style.display = "block";
}

function closeCustomerDialog() {
    document.getElementById("customerDialog").style.display = "none";
}
// Ki·ªÉm tra tr·∫°ng th√°i d·ªØ li·ªáu kh√°ch h√†ng ƒë·ªÉ b·∫≠t/t·∫Øt n√∫t th√™m kh√°ch h√†ng
function checkCustomerDataStatus() {
    const customerID = document.getElementById('customerID').value;
    const addCustomerBtn = document.getElementById('addCustomerBtn');
    
    // N·∫øu ƒë√£ ch·ªçn kh√°ch h√†ng t·ª´ danh s√°ch, v√¥ hi·ªáu h√≥a n√∫t th√™m kh√°ch h√†ng
    if (customerID) {
        addCustomerBtn.disabled = true;
        addCustomerBtn.style.opacity = "0.5";
        addCustomerBtn.style.cursor = "not-allowed";
    } else {
        addCustomerBtn.disabled = false;
        addCustomerBtn.style.opacity = "1";
        addCustomerBtn.style.cursor = "pointer";
    }
}

// Th√™m kh√°ch h√†ng m·ªõi
function addNewCustomer() {
    // L·∫•y th√¥ng tin t·ª´ form
    const fullName = document.getElementById('customerName').value.trim();
    const phoneNumber = document.getElementById('customerPhone').value.trim();
    const email = document.getElementById('customerEmail').value.trim();
    const address = document.getElementById('customerAddress').value.trim();
    
    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!fullName || !phoneNumber || !email || !address) {
        alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin kh√°ch h√†ng!");
        return;
    }
    
    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
        alert("Email kh√¥ng h·ª£p l·ªá!");
        return;
    }
    
    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i
    const phoneRegex = /^(0[3|5|7|8|9])+([0-9]{8})$/;
    if (!phoneRegex.test(phoneNumber)) {
        alert("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng.");
        return;
    }
    
    // Th·ª±c hi·ªán g·ªçi API ƒë·ªÉ th√™m kh√°ch h√†ng m·ªõi
    fetch("/customers", {
        method: "POST",
        headers: { 
            "Content-Type": "application/json" 
        },
        body: JSON.stringify({
            fullName,
            phoneNumber,
            email,
            address
        })
    })
    .then(response => {
        // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa ph·∫£n h·ªìi
        if (!response.ok) {
            // ƒê·ªçc th√¥ng b√°o l·ªói t·ª´ response
            return response.json().then(errorData => {
                throw new Error(errorData.message || 'C√≥ l·ªói x·∫£y ra');
            });
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // N·∫øu th√™m th√†nh c√¥ng, c·∫≠p nh·∫≠t ID c·ªßa kh√°ch h√†ng v·ª´a th√™m
            document.getElementById('customerID').value = data.customer._id;
            
            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            alert("Th√™m kh√°ch h√†ng th√†nh c√¥ng!");
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t th√™m kh√°ch h√†ng
            checkCustomerDataStatus();
            
            // C·∫≠p nh·∫≠t th√¥ng tin giao h√†ng
            updateDeliveryInfo();
        } else {
            // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng th√†nh c√¥ng nh∆∞ng kh√¥ng ph·∫£i l√† l·ªói server
            alert(data.message || "Th√™m kh√°ch h√†ng kh√¥ng th√†nh c√¥ng!");
        }
    })
    .catch(error => {
        console.error("L·ªói khi th√™m kh√°ch h√†ng:", error);
        alert(error.message || "C√≥ l·ªói x·∫£y ra khi th√™m kh√°ch h√†ng. Vui l√≤ng th·ª≠ l·∫°i!");
    });
}


function updateDeliveryInfo() {
    // C·∫≠p nh·∫≠t th√¥ng tin giao h√†ng t·ª´ th√¥ng tin kh√°ch h√†ng
    document.getElementById("shippingCustomerNameText").innerText = document.getElementById("customerName").value || "Ch∆∞a c√≥";
    document.getElementById("shippingCustomerPhoneText").innerText = document.getElementById("customerPhone").value || "Ch∆∞a c√≥";
    document.getElementById("shippingCustomerEmailText").innerText = document.getElementById("customerEmail").value || "Ch∆∞a c√≥";
    document.getElementById("shippingCustomerAddressText").innerText = document.getElementById("customerAddress").value || "Ch∆∞a c√≥";
}

// C·∫≠p nh·∫≠t h√†m selectCustomer ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i n√∫t th√™m kh√°ch h√†ng
function selectCustomer(id, name, phone, email, address) {
    // C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng
    document.getElementById("customerID").value = id; 
    document.getElementById("customerName").value = name;
    document.getElementById("customerPhone").value = phone;
    document.getElementById("customerEmail").value = email;
    document.getElementById("customerAddress").value = address;

    // C·∫≠p nh·∫≠t th√¥ng tin giao h√†ng
    updateDeliveryInfo();
    
    // Ki·ªÉm tra tr·∫°ng th√°i n√∫t th√™m kh√°ch h√†ng
    checkCustomerDataStatus();
    
    closeCustomerDialog();
}

// H√†m kh·ªüi t·∫°o tr·∫°ng th√°i ban ƒë·∫ßu
window.onload = function() {
    // G·ªçi h√†m ki·ªÉm tra tr·∫°ng th√°i n√∫t th√™m kh√°ch h√†ng
    checkCustomerDataStatus();
    
    // C√°c m√£ kh·ªüi t·∫°o kh√°c n·∫øu c√≥...
}
function filterCustomers() {
    // L·∫•y gi√° tr·ªã t√¨m ki·∫øm (v√† chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng ƒë·ªÉ so s√°nh kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng)
    const searchTerm = document.getElementById('customerSearchInput').value.trim().toLowerCase();
    
    // L·∫•y t·∫•t c·∫£ c√°c d√≤ng kh√°ch h√†ng
    const customerRows = document.querySelectorAll('.customer-row');
    
    // Kh·ªüi t·∫°o bi·∫øn ƒë·∫øm kh√°ch h√†ng hi·ªÉn th·ªã
    let visibleCustomerCount = 0;
    
    // L·∫∑p qua t·ª´ng d√≤ng ƒë·ªÉ ki·ªÉm tra
    customerRows.forEach(row => {
        // L·∫•y t√™n v√† s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng
        const customerNameElement = row.querySelector('.customer-name');
        const customerPhoneElement = row.querySelector('.customer-phone');
        
        const customerName = customerNameElement ? customerNameElement.textContent.toLowerCase() : '';
        const customerPhone = customerPhoneElement ? customerPhoneElement.textContent.toLowerCase() : '';
        
        // Ki·ªÉm tra xem t√™n ho·∫∑c s·ªë ƒëi·ªán tho·∫°i c√≥ ch·ª©a chu·ªói t√¨m ki·∫øm kh√¥ng
        if (customerName.includes(searchTerm) || customerPhone.includes(searchTerm)) {
            // N·∫øu c√≥, hi·ªÉn th·ªã d√≤ng
            row.style.display = '';
            visibleCustomerCount++;
        } else {
            // N·∫øu kh√¥ng, ·∫©n d√≤ng
            row.style.display = 'none';
        }
    });
    
    // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ kh√°ch h√†ng n√†o ph√π h·ª£p
    const noCustomersMessage = document.getElementById('noCustomersMessage');
    if (visibleCustomerCount === 0) {
        noCustomersMessage.style.display = 'block';
    } else {
        noCustomersMessage.style.display = 'none';
    }
}
let selectedPromotion = null;
let originalTotalAmount = 0;

// Function to open promotion dialog
function openPromotionDialog() {
    // Fetch current promotions from the server
    fetch("/promotions/api/json")
        .then(response => response.json())
        .then(promotions => {
            displayPromotions(promotions);
            document.getElementById("promotionDialog").style.display = "block";
        })
        .catch(error => {
            console.error("L·ªói khi l·∫•y danh s√°ch khuy·∫øn m√£i:", error);
            alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch khuy·∫øn m√£i. Vui l√≤ng th·ª≠ l·∫°i sau.");
        });
}

// Function to close promotion dialog
function closePromotionDialog() {
    document.getElementById("promotionDialog").style.display = "none";
}

// Function to display promotions in dialog
function displayPromotions(promotionsData) {
    const promotionTableBody = document.getElementById("promotionTableBody");
    promotionTableBody.innerHTML = "";
    
    // Handle different response formats
    let promotions = promotionsData;
    if (promotionsData && typeof promotionsData === 'object' && !Array.isArray(promotionsData)) {
        // Check if data is in a nested property
        if (promotionsData.data) {
            promotions = promotionsData.data;
        }
    }
    
    // Ensure promotions is an array
    if (!Array.isArray(promotions)) {
        console.error('Invalid promotions data format:', promotionsData);
        promotionTableBody.innerHTML = `
            <tr>
                <td colspan="6" class="text-center">Kh√¥ng th·ªÉ t·∫£i danh s√°ch khuy·∫øn m√£i</td>
            </tr>
        `;
        return;
    }
    
    // Get current date for comparison
    const currentDate = new Date();
    currentDate.setHours(0, 0, 0, 0); // Reset time part for date comparison
    
    // Filter active promotions
    const activePromotions = promotions.filter(promo => {
        const startDate = new Date(promo.startDate);
        const endDate = new Date(promo.endDate);
        endDate.setHours(23, 59, 59, 999); // Include end date fully
        
        return (currentDate >= startDate && currentDate <= endDate) || 
               promo.status === 'active';
    });
    
    if (activePromotions.length === 0) {
        promotionTableBody.innerHTML = `
            <tr>
                <td colspan="6" class="text-center">Kh√¥ng c√≥ khuy·∫øn m√£i n√†o ƒëang ho·∫°t ƒë·ªông</td>
            </tr>
        `;
        return;
    }
    
    activePromotions.forEach(promo => {
        const row = document.createElement("tr");
        
        // Format dates for display
        const startDateFormatted = new Date(promo.startDate).toLocaleDateString('vi-VN');
        const endDateFormatted = new Date(promo.endDate).toLocaleDateString('vi-VN');
        
        // Calculate if promo is applicable to current order
        const currentTotal = parseFloat(document.getElementById("totalAmount").innerText.replace(/[^\d]/g, '')) || 0;
        const isApplicable = currentTotal >= promo.minOrderValue;
        
        row.innerHTML = `
            <td>${promo.name}</td>
            <td>${promo.discount}%</td>
            <td>${promo.minOrderValue.toLocaleString()} VND</td>
            <td>${promo.maxDiscount.toLocaleString()} VND</td>
            <td>${startDateFormatted} - ${endDateFormatted}</td>
            <td>
                <button 
                    class="btn ${isApplicable ? 'btn-primary' : 'btn-secondary'}" 
                    onclick="selectPromotion('${promo._id}', '${promo.name}', ${promo.discount}, ${promo.minOrderValue}, ${promo.maxDiscount})"
                    ${!isApplicable ? 'disabled' : ''}
                >
                    ${isApplicable ? 'Ch·ªçn' : 'Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán'}
                </button>
            </td>
        `;
        
        promotionTableBody.appendChild(row);
    });
}

// Function to select a promotion
function selectPromotion(id, name, discount, minOrderValue, maxDiscount) {
    // Store current total without any discount
    if (!originalTotalAmount) {
        originalTotalAmount = parseFloat(document.getElementById("totalAmount").innerText.replace(/[^\d]/g, '')) || 0;
    }
    
    // Check if order meets minimum value
    if (originalTotalAmount < minOrderValue) {
        alert(`ƒê∆°n h√†ng ch∆∞a ƒë·∫°t gi√° tr·ªã t·ªëi thi·ªÉu ${minOrderValue.toLocaleString()} VND ƒë·ªÉ √°p d·ª•ng khuy·∫øn m√£i n√†y.`);
        return;
    }
    
    // Store selected promotion
    selectedPromotion = {
        id: id,
        name: name,
        discount: discount,
        minOrderValue: minOrderValue,
        maxDiscount: maxDiscount
    };
    
    // Calculate discount amount
    let discountAmount = (originalTotalAmount * discount) / 100;
    
    // Cap at maximum discount if applicable
    if (discountAmount > maxDiscount) {
        discountAmount = maxDiscount;
    }
    
    // Calculate new total
    const newTotal = originalTotalAmount - discountAmount;
    
    // Update UI
    document.getElementById("selectedPromotionName").innerText = name;
    document.getElementById("discountAmount").innerText = discountAmount.toLocaleString() + " VND";
    document.getElementById("totalAmount").innerText = newTotal.toLocaleString() + " VND";
    document.getElementById("promotionApplied").style.display = "block";
    document.getElementById("removePromotionBtn").style.display = "inline-block";
    
    // Close dialog
    closePromotionDialog();
}

// Function to remove promotion
function removePromotion() {
    if (originalTotalAmount) {
        // Restore original total
        document.getElementById("totalAmount").innerText = originalTotalAmount.toLocaleString() + " VND";
    }
    
    // Reset UI
    document.getElementById("selectedPromotionName").innerText = "";
    document.getElementById("discountAmount").innerText = "0 VND";
    document.getElementById("promotionApplied").style.display = "none";
    document.getElementById("removePromotionBtn").style.display = "none";
    
    // Reset selected promotion
    selectedPromotion = null;
}

    </script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding-top: 40px;
            height: 100vh;
            width: 100vw;
            display: flex;
            justify-content: flex-end;
            align-items: flex-start;
        }
        
        .content-container {
            width: 85%;
            background-color: white;
            padding: 20px;
            margin-top: 20px;
            margin-right: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }
    
        h1, h3 {
            color: #333;
            text-align: center;
        }
    
        .container {
            display: flex;
            justify-content: space-between;
            gap: 20px;
        }
    
        .box {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            width: 48%;
        }
    
        label {
            font-weight: bold;
            display: block;
            margin-top: 10px;
        }
    
        input, textarea {
            width: 97%;
            padding: 8px;
            margin-top: 5px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
    
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }
    
        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
        }
    
        th {
            background-color: #007bff;
            color: white;
        }
    
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
    
        button {
            background-color: #28a745;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
        }
    
        button:hover {
            background-color: #218838;
        }
    
        .dialog {
            display: none;
            position: fixed;
            top: 20%;
            left: 30%;
            width: 40%;
            background: white;
            padding: 20px;
            border: 2px solid #333;
            border-radius: 8px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
        }
    
        .close-btn {
            background-color: red;
            float: right;
        }
    
        .total {
            font-size: 18px;
            font-weight: bold;
            text-align: right;
            margin-top: 10px;
        }
        
        .box1 {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            width: 100%;
            margin-bottom: 30px;
        }
        
        #attributeDialog {
            display: none;
            position: fixed;
            top: 20%;
            left: 30%;
            width: 40%;
            background: white;
            align-content: center;
            padding: 20px;
            border: 2px solid #333;
            border-radius: 8px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
        }
        
        /* Nh√≥m thu·ªôc t√≠nh */
        .attribute-group {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        /* M·ªói item c·ªßa thu·ªôc t√≠nh */
        .attribute-item {
            display: flex;
            align-items: center;
            gap: 5px;
            background: #f9f9f9;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
        }
        
        /* Ch·ªânh s·ª≠a button ch·ªçn thu·ªôc t√≠nh */
        .small-btn {
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px;
            cursor: pointer;
            font-size: 14px;
            margin-left: 5px;
        }
        
        .small-btn:hover {
            background-color: #0056b3;
        }
        
        /* T·ªïng ti·ªÅn & N√∫t T·∫°o ƒê∆°n H√†ng n·ªïi c·ªë ƒë·ªãnh ·ªü bottom */
        .fixed-bottom-bar {
    position: fixed;
    bottom: 0;
    left: 10;
    width: calc(82%); /* Gi·∫£m chi·ªÅu r·ªông ƒëi 200px */
    background: #ffffff;
    padding: 15px 20px;
    border-top: 2px solid #ddd;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0px -2px 10px rgba(0, 0, 0, 0.1);
}

/* ƒêi·ªÅu ch·ªânh v·ªã tr√≠ n√∫t "T·∫°o ƒê∆°n H√†ng" */
.submit-btn {
    background-color: #007bff;
    color: white;
    padding: 12px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    margin-right: 0; /* Lo·∫°i b·ªè margin-right 60px */
    font-weight: bold;
}
        
        /* T·ªïng ti·ªÅn */
        .total-text {
            font-size: 20px;
            font-weight: bold;
            color: #333;
        }
        
        /* N√∫t T·∫°o ƒê∆°n H√†ng */
        .submit-btn {
    background-color: #007bff;
    color: white;
    padding: 12px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    margin-right: 0; /* Lo·∫°i b·ªè margin-right 60px */
    font-weight: bold;
}
        
        .submit-btn:hover {
            background-color: #0056b3;
        }
        
        /* Th√¥ng tin giao h√†ng */
        .delivery-info {
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
        }
        
        .delivery-info-column {
            width: 48%;
        }
        
        .delivery-info-field {
            margin-bottom: 15px;
        }
        
        .delivery-info-label {
            font-weight: bold;
            display: block;
            margin-bottom: 5px;
        }
        
        .delivery-info-value {
            padding: 5px;
            background-color: #f9f9f9;
            border-radius: 4px;
            min-height: 20px;
        }
        
        .delete-btn {
            background-color: #ff4d4d;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            cursor: pointer;
        }
        
        .delete-btn:hover {
            background-color: #ff0000;
        }
    </style>
    
</head>
<body>
<div class="content-container">
    <h1>T·∫°o ƒê∆°n H√†ng</h1>

    <div class="container">
        <!-- Th√¥ng tin kh√°ch h√†ng -->
<div class="box">
    <h3>Th√¥ng tin kh√°ch h√†ng</h3>
    <input type="hidden" id="customerID">
    <label>T√™n kh√°ch h√†ng:</label>
    <input type="text" id="customerName" name="customerName" required onchange="updateDeliveryInfo(); checkCustomerDataStatus()">
    
    <label>S·ªë ƒëi·ªán tho·∫°i:</label>
    <input type="text" id="customerPhone" name="customerPhone" required onchange="updateDeliveryInfo(); checkCustomerDataStatus()">
    
    <label>Email:</label>
    <input type="email" id="customerEmail" name="customerEmail" required onchange="updateDeliveryInfo(); checkCustomerDataStatus()">
    
    <label>ƒê·ªãa ch·ªâ:</label>
    <input type="text" id="customerAddress" name="customerAddress" required onchange="updateDeliveryInfo(); checkCustomerDataStatus()">

    <div style="display: flex; gap: 10px; margin-top: 10px;">
        <button type="button" onclick="openCustomerDialog()">Ch·ªçn Kh√°ch H√†ng</button>
        <button type="button" id="addCustomerBtn" onclick="addNewCustomer()">Th√™m Kh√°ch H√†ng</button>
    </div>
</div>
    
        <!-- Th√¥ng tin s·∫£n ph·∫©m -->
        <div class="box">
            <h3>Ch·ªçn S·∫£n Ph·∫©m</h3>
            <button type="button" onclick="openProductDialog()" >Th√™m S·∫£n Ph·∫©m</button>
            <table>
                <tr>
                    <th>·∫¢nh</th>
                    <th>T√™n</th>
                    <th>Thu·ªôc t√≠nh</th>
                    <th>S·ªë l∆∞·ª£ng t·ªìn</th>
                    <th>Gi√°</th>
                    <th>S·ªë l∆∞·ª£ng</th>
                    <th>Th√†nh ti·ªÅn</th>
                </tr>
                <tbody id="selectedProducts"></tbody>
            </table>
        </div>
    </div>
    <div style="display: flex; justify-content: space-between; align-items: center; margin: 20px 0;">
        <button type="button" class="btn btn-info" onclick="openPromotionDialog()">Ch·ªçn Khuy·∫øn M√£i</button>
        <div id="promotionApplied" style="display: none; background-color: #e0f7fa; padding: 10px; border-radius: 5px;">
            <div style="display: flex; align-items: center; gap: 10px;">
                <div>
                    <strong>Khuy·∫øn m√£i √°p d·ª•ng:</strong> <span id="selectedPromotionName"></span>
                </div>
                <div>
                    <strong>S·ªë ti·ªÅn gi·∫£m:</strong> <span id="discountAmount">0 VND</span>
                </div>
                <button id="removePromotionBtn" type="button" class="btn btn-sm btn-danger" 
                        onclick="removePromotion()" style="display: none;">H·ªßy khuy·∫øn m√£i</button>
            </div>
        </div>
    </div>
    
    <!-- Dialog ch·ªçn khuy·∫øn m√£i -->
    <div id="promotionDialog" style="display:none; position:fixed; top:20%; left:20%; width:60%; background:white; padding:20px; border:1px solid black; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); z-index: 1000; max-height: 60%; overflow-y: auto;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
            <h3 style="margin: 0;">Ch·ªçn Khuy·∫øn M√£i</h3>
            <button onclick="closePromotionDialog()" style="background: red; color: white; border: none; border-radius: 4px; padding: 5px 10px;">ƒê√≥ng</button>
        </div>
        
        <div style="margin-bottom: 15px;">
            <p>Ch·ªâ hi·ªÉn th·ªã c√°c khuy·∫øn m√£i ƒëang ho·∫°t ƒë·ªông v√† c√≥ th·ªÉ √°p d·ª•ng cho ƒë∆°n h√†ng c·ªßa b·∫°n.</p>
        </div>
        
        <table style="width: 100%; border-collapse: collapse;">
            <thead>
                <tr style="background-color: #f2f2f2;">
                    <th style="padding: 10px; text-align: left; border: 1px solid #ddd;">T√™n khuy·∫øn m√£i</th>
                    <th style="padding: 10px; text-align: center; border: 1px solid #ddd;">Gi·∫£m gi√°</th>
                    <th style="padding: 10px; text-align: right; border: 1px solid #ddd;">Gi√° tr·ªã t·ªëi thi·ªÉu</th>
                    <th style="padding: 10px; text-align: right; border: 1px solid #ddd;">Gi·∫£m t·ªëi ƒëa</th>
                    <th style="padding: 10px; text-align: center; border: 1px solid #ddd;">Th·ªùi gian</th>
                    <th style="padding: 10px; text-align: center; border: 1px solid #ddd;">Thao t√°c</th>
                </tr>
            </thead>
            <tbody id="promotionTableBody">
                <!-- Promotions will be populated here by JavaScript -->
            </tbody>
        </table>
    </div>

    <!-- Th√¥ng tin giao h√†ng (ƒë√£ lo·∫°i b·ªè ph·∫ßn l·ª±a ch·ªçn h√¨nh th·ª©c giao h√†ng) -->
    <div style="margin-top: 30px; margin-bottom: 70px;">
        <div class="box1">
            <h3>Th√¥ng tin chi ti·∫øt</h3>
            <div class="delivery-info">
                <div class="delivery-info-column">
                    <div class="delivery-info-field">
                        <label class="delivery-info-label">T√™n kh√°ch h√†ng:</label>
                        <div id="shippingCustomerNameText" class="delivery-info-value">Ch∆∞a c√≥</div>
                    </div>
                    <div class="delivery-info-field">
                        <label class="delivery-info-label">S·ªë ƒëi·ªán tho·∫°i:</label>
                        <div id="shippingCustomerPhoneText" class="delivery-info-value">Ch∆∞a c√≥</div>
                    </div>
                </div>
                <div class="delivery-info-column">
                    <div class="delivery-info-field">
                        <label class="delivery-info-label">Email:</label>
                        <div id="shippingCustomerEmailText" class="delivery-info-value">Ch∆∞a c√≥</div>
                    </div>
                    <div class="delivery-info-field">
                        <label class="delivery-info-label">ƒê·ªãa ch·ªâ :</label>
                        <div id="shippingCustomerAddressText" class="delivery-info-value">Ch∆∞a c√≥</div>
                    </div>
                </div>
            </div>
            <label>Ghi ch√∫:</label>
            <textarea id="shippingNotes" name="shippingNotes" rows="3" placeholder="Nh·∫≠p ghi ch√∫ n·∫øu c·∫ßn..."></textarea>
        </div>
    </div>

    <div class="fixed-bottom-bar">
        <h3 class="total-text" style="margin-left: 20px;">T·ªïng ti·ªÅn: <span id="totalAmount">0</span> VND</h3>
        <button type="submit" class="submit-btn" onclick='createOrder()'>T·∫°o ƒê∆°n H√†ng</button>
    </div>

    <!-- Dialog ch·ªçn s·∫£n ph·∫©m -->
<div id="productDialog" style="display:none; position:fixed; top:20%; left:30%; width:40%; background:white; padding:20px; border:1px solid black;">
    <h3>Ch·ªçn S·∫£n Ph·∫©m</h3>
    
    <!-- Th√™m tr∆∞·ªùng t√¨m ki·∫øm s·∫£n ph·∫©m -->
    <div style="margin-bottom: 15px;">
        <label for="productSearchInput">T√¨m ki·∫øm s·∫£n ph·∫©m:</label>
        <input type="text" id="productSearchInput" placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m..." style="width: 100%; padding: 8px; margin-top: 5px;" 
               onkeyup="filterProducts()">
    </div>
    
    <table border="1">
        <tr>
            <th>·∫¢nh</th>
            <th>T√™n</th>
            <th>Thu·ªôc t√≠nh</th>
            <th>Gi√°</th>
            <th>S·ªë l∆∞·ª£ng</th>
            <th>Ch·ªçn</th>
        </tr>
        <tbody id="productTableBody">
            <% products.forEach(product => { %>
                <tr class="product-row">
                    <td><img src="<%= product.thumbnail %>" width="50"></td>
                    <td class="product-name"><%= product.name %></td>
                    <td>
                        <span id="selected-attributes-<%= product._id %>">Ch∆∞a ch·ªçn</span>
                        <button type="button" class="small-btn" 
                            onclick='openAttributeDialog("<%= product._id %>", "<%= product.name %>", <%- JSON.stringify(product.attributes) %>)'>
                            üõ†Ô∏è
                        </button>
                    </td>
                    <td><%= (product.price || 0).toLocaleString() %> VND</td>
                    <td><%= product.inventory %></td>
                    <td>
                        <input type="checkbox" id="productCheckbox-<%= product._id %>" 
                        disabled 
                        onchange="toggleProductSelection(this, '<%= product._id %>', '<%= product.name %>', '<%= product.price %>', '<%= product.thumbnail %>', '<%= product.inventory %>', decodeURIComponent('<%= encodeURIComponent(JSON.stringify(product.attributes)) %>'))">
                    </td>
                </tr>
            <% }) %>
        </tbody>
    </table>
    <div id="noProductsMessage" style="display: none; text-align: center; padding: 15px; color: #555;">
        Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p
    </div>
    <button onclick="saveSelectedProducts()">L∆∞u</button>
    <button onclick="closeProductDialog()">ƒê√≥ng</button>
</div>

    <!-- Dialog ch·ªçn thu·ªôc t√≠nh -->
    <div id="attributeDialog" class="dialog" style="display:none;">
        <h3>Ch·ªçn Thu·ªôc T√≠nh</h3>
        <div id="attributeOptions"></div>
        <button onclick="saveAttributeSelection()">L∆∞u</button>
        <button onclick="closeAttributeDialog()">ƒê√≥ng</button>
    </div>

    <!-- Dialog ch·ªçn kh√°ch h√†ng -->
<div id="customerDialog" style="display:none; position:fixed; top:20%; left:30%; width:40%; background:white; padding:20px; border:1px solid black;">
    <h3>Ch·ªçn Kh√°ch H√†ng</h3>
    
    <!-- Th√™m tr∆∞·ªùng t√¨m ki·∫øm kh√°ch h√†ng -->
    <div style="margin-bottom: 15px;">
        <label for="customerSearchInput">T√¨m ki·∫øm kh√°ch h√†ng:</label>
        <input type="text" id="customerSearchInput" placeholder="Nh·∫≠p t√™n ho·∫∑c s·ªë ƒëi·ªán tho·∫°i..." style="width: 100%; padding: 8px; margin-top: 5px;" 
               onkeyup="filterCustomers()">
    </div>
    
    <table border="1">
        <tr>
            <th>T√™n</th>
            <th>ƒêi·ªán tho·∫°i</th>
            <th>Email</th>
            <th>ƒê·ªãa ch·ªâ</th>
            <th>Ch·ªçn</th>
        </tr>
        <tbody id="customerTableBody">
            <% customers.forEach(customer => { %>
                <tr class="customer-row">
                    <td class="customer-name"><%= customer.fullName %></td>
                    <td class="customer-phone"><%= customer.phoneNumber %></td>
                    <td><%= customer.email %></td>
                    <td><%= customer.address %></td>
                    <td><button type="button" onclick="selectCustomer('<%= customer.id %>', '<%= customer.fullName %>', '<%= customer.phoneNumber %>', '<%= customer.email %>', '<%= customer.address %>')">Ch·ªçn</button></td>
                </tr>
            <% }) %>
        </tbody>
    </table>
    <div id="noCustomersMessage" style="display: none; text-align: center; padding: 15px; color: #555;">
        Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng n√†o ph√π h·ª£p
    </div>
    <button onclick="closeCustomerDialog()">ƒê√≥ng</button>
</div>
</div>
</body>
</html>