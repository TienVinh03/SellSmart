<%- include('../layouts/main.ejs') %>

<div class="main-content order-page">
  <h1>Danh sách đơn hàng</h1>
  <div class="order-button-container">
    <a href="/orders/create" class="order-create-btn">
      <i class="fas fa-plus-circle"></i> Tạo Đơn Hàng
    </a>
  </div>

  <!-- Mục tìm kiếm đơn hàng -->
  <div class="order-search-container">
    <h3>Tìm kiếm đơn hàng</h3>
    <div class="order-search-grid">
      <div>
        <label for="searchOrderID">Mã đơn hàng:</label>
        <input type="text" id="searchOrderID" class="order-search-input" placeholder="Nhập mã đơn hàng">
      </div>
      <div>
        <label for="searchCustomerName">Tên khách hàng:</label>
        <input type="text" id="searchCustomerName" class="order-search-input" placeholder="Nhập tên khách hàng">
      </div>
      <div>
        <label for="searchPhone">Số điện thoại:</label>
        <input type="text" id="searchPhone" class="order-search-input" placeholder="Nhập số điện thoại">
      </div>
      <div>
        <label for="searchAddress">Địa chỉ:</label>
        <input type="text" id="searchAddress" class="order-search-input" placeholder="Nhập địa chỉ">
      </div>
      <div>
        <label for="searchStatus">Trạng thái:</label>
        <select id="searchStatus" class="order-search-input">
          <option value="">Tất cả</option>
          <option value="pending">Đang chờ xử lý</option>
          <option value="processing">Đang xử lý</option>
          <option value="shipping">Đang giao hàng</option>
          <option value="delivered">Đã giao hàng</option>
          <option value="canceled">Đã hủy</option>
        </select>
      </div>
      <div>
        <label for="searchFromDate">Từ ngày:</label>
        <input type="date" id="searchFromDate" class="order-search-input">
      </div>
      <div>
        <label for="searchToDate">Đến ngày:</label>
        <input type="date" id="searchToDate" class="order-search-input">
      </div>
    </div>
    <div class="order-search-actions">
      <button type="button" onclick="searchOrdersDirectly()" class="order-search-btn">
        <i class="fas fa-search"></i> Tìm kiếm
      </button>
      <button type="button" onclick="resetSearch()" class="order-reset-btn">
        <i class="fas fa-undo"></i> Đặt lại
      </button>
    </div>
  </div>
  
  <table class="order-table">
    <thead>
      <tr>
        <th>Mã đơn hàng</th>
        <th>Khách hàng</th>
        <!-- <th>Tên sản phẩm</th> -->
        <th>SĐT</th>
        <th>Tổng tiền</th>
        <th>Trạng thái</th>
        <th>Ngày tạo</th>
        <th>Thao tác</th>
      </tr>
    </thead>
    <tbody>
      <% orders.forEach(order=> { %>
      <tr>
        <td>
          <%= order.orderID %>
        </td>
        <td>
          <%= order.customerID ? order.customerID.fullName : "Unknown Customer" %>
        </td>
        <td>
          <%= order.customerID ? order.customerID.phoneNumber : "Unknown Customer" %>
        </td>
        <!-- <td>
          <% if (order.products && order.products.length> 0) { %>
          <ul class="order-product-list">
            <% order.products.forEach(product=> { %>
            <li>
              <b>
                <%= product.productID ? product.productID.name : product.name || "Không có sản phẩm" %>
              </b> -
              <%= product.quantity || 1 %> x
              <%= product.price.toLocaleString("vi-VN") %> VND
        
              <% if (product.productID && product.productID.attributes && product.productID.attributes.length> 0) { %>
              <ul class="order-product-attributes">
                <% product.productID.attributes.forEach(attr=> { %>
                <% if (attr.values && attr.values.length> 0) { %>
                <li><b>
                    <%= attr.name %>
                  </b>: <%= attr.values.join(", ") %></li>
                <% } %>
                <% }) %>
              </ul>
              <% } else if (product.attributes && product.attributes.length > 0) { %>
              <ul class="order-product-attributes">
                <% product.attributes.forEach(attr=> { %>
                <li><b>
                    <%= attr.name %>
                  </b>: <%= Array.isArray(attr.value) ? attr.value.join(", ") : attr.value %></li>
                <% }) %>
              </ul>
              <% } else { %>
              <p>Không có thuộc tính</p>
              <% } %>
            </li>
            <% }) %>
          </ul>
          <% } else { %>
          Không có sản phẩm
          <% } %>
        </td> -->

        <td><%= order.totalAmount.toLocaleString("vi-VN") %> VND</td>
        <td>
          <span class="order-status status-<%= order.status %>">
            <% const statusMap = {
              'pending': 'Đang chờ xử lý',
              'processing': 'Đang xử lý',
              'shipping': 'Đang giao hàng',
              'delivered': 'Đã giao hàng',
              'canceled': 'Đã hủy'
            }; %>
            <%= statusMap[order.status] || order.status %>
          </span>
        </td>
        <td><%= new Date(order.createdAt).toLocaleString('vi-VN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' }) %></td>
        <td>
          <div class="order-action-buttons">
            <button class="order-action-btn order-view-btn" onclick="viewOrderDetail('<%= order._id %>')">
              <i class="fas fa-eye"></i> Chi tiết
            </button>
            <button class="order-action-btn order-delete-btn" onclick="deleteOrder('<%= order._id %>')">
              <i class="fas fa-trash"></i> Xóa
            </button>
          </div>
        </td>
      </tr>
      <% }) %>
    </tbody>
  </table>
  
  <!-- Background overlay for modal -->
  <div class="order-modal-overlay" id="modalOverlay"></div>
  
  <!-- Dialog xem chi tiết đơn hàng -->
  <div id="orderDetailDialog">
    <div class="order-dialog-header">
      <h2>Chi tiết đơn hàng <span id="orderDetailID"></span></h2>
      <button onclick="closeOrderDetailDialog()" class="order-close-dialog">
        <i class="fas fa-times"></i> Đóng
      </button>
    </div>

    <div class="order-dialog-content">
      <div class="order-info">
        <h3>Thông tin đơn hàng</h3>
        <table class="order-info-table">
          <tr>
            <td>Mã đơn hàng:</td>
            <td id="orderDetailOrderID"></td>
          </tr>
          <tr>
            <td>Ngày tạo:</td>
            <td id="orderDetailCreatedAt"></td>
          </tr>
          <tr>
            <td>Trạng thái:</td>
            <td id="orderDetailStatus"></td>
          </tr>
          <tr>
            <td>Nhân viên:</td>
            <td id="orderDetailEmployee"></td>
          </tr>
        </table>
      </div>
      
      <div class="order-customer-info">
        <h3>Thông tin khách hàng</h3>
        <table class="order-info-table">
          <tr>
            <td>Tên khách hàng:</td>
            <td id="orderDetailCustomerName"></td>
          </tr>
          <tr>
            <td>Số điện thoại:</td>
            <td id="orderDetailCustomerPhone"></td>
          </tr>
          <tr>
            <td>Email:</td>
            <td id="orderDetailCustomerEmail"></td>
          </tr>
          <tr>
            <td>Địa chỉ:</td>
            <td id="orderDetailCustomerAddress"></td>
          </tr>
        </table>
      </div>
    </div>

    <h3>Danh sách sản phẩm</h3>
    <table class="order-products-table">
      <thead>
        <tr>
          <th style="text-align:left;">Sản phẩm</th>
          <th style="text-align:left;">Thuộc tính</th>
          <th style="text-align:right;">Đơn giá</th>
          <th style="text-align:center;">Số lượng</th>
          <th style="text-align:right;">Thành tiền</th>
        </tr>
      </thead>
      <tbody id="orderDetailProducts">
        <!-- Các sản phẩm sẽ được thêm bằng JavaScript -->
      </tbody>
    </table>

    <div class="order-total-amount">
      Tổng tiền: <span id="orderDetailTotal"></span> VND
    </div>
  </div>
</div>

<script>
  // Lưu trữ tất cả đơn hàng
  let allOrders = [];

  // Tìm kiếm đơn hàng
  function searchOrders() {
    const orderID = document.getElementById('searchOrderID').value.trim().toLowerCase();
    const customerName = document.getElementById('searchCustomerName').value.trim().toLowerCase();
    const phone = document.getElementById('searchPhone').value.trim().toLowerCase();
    const address = document.getElementById('searchAddress').value.trim().toLowerCase();
    const status = document.getElementById('searchStatus').value;
    const fromDate = document.getElementById('searchFromDate').value;
    const toDate = document.getElementById('searchToDate').value;

    console.log("Tìm kiếm:", { orderID, customerName, phone, address, status, fromDate, toDate });

    const filteredOrders = allOrders.filter(order => {
      // Kiểm tra OrderID
      const matchOrderID = !orderID || 
        (order.orderID && order.orderID.toLowerCase().includes(orderID));

      // Kiểm tra Tên khách hàng
      const matchCustomerName = !customerName || 
        (order.customerID && order.customerID.fullName && 
         order.customerID.fullName.toLowerCase().includes(customerName));

      // Kiểm tra Số điện thoại
      const matchPhone = !phone || 
        (order.customerID && order.customerID.phoneNumber && 
         order.customerID.phoneNumber.toLowerCase().includes(phone));

      // Kiểm tra Địa chỉ (để trống vì chưa có thông tin địa chỉ)
      const matchAddress = !address;

      // Kiểm tra Trạng thái
      const matchStatus = !status || 
        (order.status && order.status.toLowerCase() === status.toLowerCase());

      // Kiểm tra Khoảng ngày
      let matchDateRange = true;
      if (fromDate || toDate) {
        try {
          // Chuyển đổi chuỗi ngày thành đối tượng Date
          const [day, month, year] = order.createdAt.split(/[ /]/).map(Number);
          const orderDate = new Date(year, month - 1, day);
          
          if (fromDate) {
            const fromDateObj = new Date(fromDate);
            matchDateRange = matchDateRange && orderDate >= fromDateObj;
          }
          
          if (toDate) {
            const toDateObj = new Date(toDate);
            toDateObj.setDate(toDateObj.getDate() + 1);
            matchDateRange = matchDateRange && orderDate < toDateObj;
          }
        } catch (error) {
          console.error("Lỗi khi phân tích ngày:", error);
          matchDateRange = false;
        }
      }

      const isMatch = matchOrderID && matchCustomerName && 
                      matchPhone && matchAddress && 
                      matchStatus && matchDateRange;

      console.log("Kiểm tra đơn hàng:", {
        orderID: order.orderID,
        isMatch,
        matchOrderID,
        matchCustomerName,
        matchPhone,
        matchAddress,
        matchStatus,
        matchDateRange
      });

      return isMatch;
    });

    console.log("Số đơn hàng tìm được:", filteredOrders.length);
    displayOrders(filteredOrders);
  }

  // Hiển thị danh sách đơn hàng
  function displayOrders(orders) {
    const tableBody = document.querySelector('.order-table tbody');
    tableBody.innerHTML = '';

    if (orders.length === 0) {
      tableBody.innerHTML = `
        <tr>
          <td colspan="7" style="text-align: center; padding: 20px;">Không tìm thấy đơn hàng nào</td>
        </tr>
      `;
      return;
    }

    // Định nghĩa các trạng thái đơn hàng
    const statusMap = {
      'pending': 'Đang chờ xử lý',
      'processing': 'Đang xử lý',
      'shipping': 'Đang giao hàng',
      'delivered': 'Đã giao hàng',
      'canceled': 'Đã hủy'
    };
    
    orders.forEach(order => {
      const row = document.createElement('tr');
      
      row.innerHTML = `
        <td>${order.orderID}</td>
        <td>${order.customerID.fullName}</td>
        <td>${order.customerID.phoneNumber}</td>
        <td>${order.totalAmount.toLocaleString("vi-VN")} VND</td>
        <td>
          <span class="order-status status-${order.status}">
            ${statusMap[order.status] || order.status}
          </span>
        </td>
        <td>${order.createdAt}</td>
        <td>
          <div class="order-action-buttons">
            <button class="order-action-btn order-view-btn" onclick="viewOrderDetail('${order._id}')">
              <i class="fas fa-eye"></i> Chi tiết
            </button>
            <button class="order-action-btn order-delete-btn" onclick="deleteOrder('${order._id}')">
              <i class="fas fa-trash"></i> Xóa
            </button>
          </div>
        </td>
      `;

      tableBody.appendChild(row);
    });
  } 

  // Reset tìm kiếm
  function resetSearch() {
    document.getElementById('searchOrderID').value = '';
    document.getElementById('searchCustomerName').value = '';
    document.getElementById('searchPhone').value = '';
    document.getElementById('searchAddress').value = '';
    document.getElementById('searchStatus').value = '';
    document.getElementById('searchFromDate').value = '';
    document.getElementById('searchToDate').value = '';

    displayOrders(allOrders);
  }

  function deleteOrder(orderId) {
    if (confirm('Bạn có chắc chắn muốn xóa đơn hàng này không?')) {
      fetch(`/orders/${orderId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.message) {
          alert(data.message);
          window.location.reload();
        }
      })
      .catch(error => {
        console.error('Lỗi khi xóa đơn hàng:', error);
        alert('Có lỗi xảy ra khi xóa đơn hàng');
      });
    }
  }

  // Khởi tạo trang
  window.onload = function() {
    console.log("Page loaded");

    allOrders = Array.from(document.querySelectorAll('.order-table tbody tr')).map(row => {
      const orderViewBtn = row.querySelector('.order-view-btn');
      const orderId = orderViewBtn ? orderViewBtn.getAttribute('onclick').match(/'([^']+)'/)[1] : '';
      
      const statusElement = row.cells[4].querySelector('.order-status');
      const statusClass = statusElement ? statusElement.classList[1].replace('status-', '') : '';

      const order = {
        _id: orderId,
        orderID: row.cells[0].textContent.trim(),
        customerID: {
          fullName: row.cells[1].textContent.trim(),
          phoneNumber: row.cells[2].textContent.trim()
        },
        totalAmount: parseFloat(row.cells[3].textContent.trim().replace(/\s*VND/, '').replace(/\./g, '')) || 0,
        status: statusClass,
        createdAt: row.cells[5].textContent.trim(),
        _originalRow: row
      };

      console.log("Đơn hàng được phát hiện:", {
        id: order._id,
        orderID: order.orderID,
        customer: order.customerID.fullName,
        phone: order.customerID.phoneNumber,
        total: order.totalAmount,
        date: order.createdAt,
        status: order.status
      });

      return order;
    });

    console.log("Tổng số đơn hàng:", allOrders.length);
  };

  // Hàm gọi trực tiếp cho nút tìm kiếm
  function searchOrdersDirectly() {
    console.log("Hàm tìm kiếm trực tiếp được gọi");
    searchOrders();
  }

  // Hàm mở dialog xem chi tiết đơn hàng
  function viewOrderDetail(orderId) {
  document.getElementById('orderDetailDialog').style.display = 'block';
  document.getElementById('modalOverlay').style.display = 'block';
  
  // Add loading indicator
  const productsContainer = document.getElementById('orderDetailProducts');
  productsContainer.innerHTML = '<tr><td colspan="5" style="text-align:center;">Đang tải...</td></tr>';
  
  fetch(`/orders/${orderId}/detail`)
    .then(response => {
      if (!response.ok) {
        throw new Error(`Server response: ${response.status} ${response.statusText}`);
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        displayOrderDetail(data.order);
      } else {
        alert("Không thể lấy thông tin đơn hàng: " + data.message);
        closeOrderDetailDialog();
      }
    })
    .catch(error => {
      console.error("Lỗi khi lấy thông tin đơn hàng:", error);
      alert("Có lỗi xảy ra khi lấy thông tin đơn hàng. Vui lòng thử lại!");
      closeOrderDetailDialog();
    });
}

  // Hàm hiển thị thông tin chi tiết đơn hàng
  function displayOrderDetail(order) {
    // Hiển thị thông tin đơn hàng
    document.getElementById('orderDetailID').textContent = order._id;
    document.getElementById('orderDetailOrderID').textContent = order.orderID;
    
    // Định dạng ngày tạo
    const createdDate = new Date(order.createdAt);
    const formattedDate = `${createdDate.getDate()}/${createdDate.getMonth() + 1}/${createdDate.getFullYear()} ${createdDate.getHours()}:${String(createdDate.getMinutes()).padStart(2, '0')}`;
    document.getElementById('orderDetailCreatedAt').textContent = formattedDate;
    
    // Hiển thị trạng thái đơn hàng
    const statusMap = {
      'pending': 'Đang chờ xử lý',
      'processing': 'Đang xử lý',
      'shipping': 'Đang giao hàng',
      'delivered': 'Đã giao hàng',
      'canceled': 'Đã hủy'
    };
    document.getElementById('orderDetailStatus').textContent = statusMap[order.status] || order.status;
    
    // Hiển thị thông tin nhân viên
    document.getElementById('orderDetailEmployee').textContent = 
      order.employeeID ? `${order.employeeID.fullName} (${order.employeeID.position})` : 'Không có';
      
    // Hiển thị thông tin khuyến mãi nếu có
    if (order.promotionID || order.promotionDetails) {
      // Tạo phần tử div thông tin khuyến mãi
      const promotionInfo = document.createElement('div');
      promotionInfo.className = 'order-promotion-info';
      
      let promotionHTML = '<h4>Thông tin khuyến mãi</h4>';
      
      if (order.promotionDetails && order.promotionDetails.name) {
        promotionHTML += `
          <div style="display: flex; gap: 20px; margin-bottom: 10px;">
            <div><strong>Tên khuyến mãi:</strong> ${order.promotionDetails.name}</div>
            <div><strong>Giảm giá:</strong> ${order.promotionDetails.discount}%</div>
          </div>
        `;
      } else if (order.promotionID && order.promotionID.name) {
        promotionHTML += `
          <div style="display: flex; gap: 20px; margin-bottom: 10px;">
            <div><strong>Tên khuyến mãi:</strong> ${order.promotionID.name}</div>
            <div><strong>Giảm giá:</strong> ${order.promotionID.discount}%</div>
          </div>
        `;
      }
      
      // Hiển thị số tiền giảm giá và giá gốc nếu có
      if (order.originalAmount) {
        const discountAmount = order.originalAmount - order.totalAmount;
        promotionHTML += `
          <div style="display: flex; gap: 20px;">
            <div><strong>Giá gốc:</strong> ${order.originalAmount.toLocaleString()} VND</div>
            <div><strong>Số tiền giảm:</strong> ${discountAmount.toLocaleString()} VND</div>
          </div>
        `;
      } else if (order.promotionDetails && order.promotionDetails.discountAmount) {
        promotionHTML += `
          <div><strong>Số tiền giảm:</strong> ${order.promotionDetails.discountAmount.toLocaleString()} VND</div>
        `;
      }
      
      promotionInfo.innerHTML = promotionHTML;
      
      // Chèn phần tử thông tin khuyến mãi vào trước tổng tiền
      const totalElement = document.querySelector('.order-total-amount');
      totalElement.parentNode.insertBefore(promotionInfo, totalElement);
    }
    
    // Hiển thị thông tin khách hàng
    if (order.customerID) {
      document.getElementById('orderDetailCustomerName').textContent = order.customerID.fullName || 'Không có';
      document.getElementById('orderDetailCustomerPhone').textContent = order.customerID.phoneNumber || 'Không có';
      document.getElementById('orderDetailCustomerEmail').textContent = order.customerID.email || 'Không có';
      document.getElementById('orderDetailCustomerAddress').textContent = order.customerID.address || 'Không có';
    } else {
      document.getElementById('orderDetailCustomerName').textContent = 'Không có';
      document.getElementById('orderDetailCustomerPhone').textContent = 'Không có';
      document.getElementById('orderDetailCustomerEmail').textContent = 'Không có';
      document.getElementById('orderDetailCustomerAddress').textContent = 'Không có';
    }
    
    // Hiển thị danh sách sản phẩm
    const productsContainer = document.getElementById('orderDetailProducts');
    productsContainer.innerHTML = ''; // Xóa nội dung cũ
    
    if (order.products && order.products.length > 0) {
      order.products.forEach(product => {
        // Tính tổng tiền cho từng sản phẩm
        const productTotal = product.price * (product.quantity || 1);
        
        // Tạo chuỗi hiển thị thuộc tính
        let attributesHTML = '';
        if (product.attributes && product.attributes.length > 0) {
          attributesHTML = product.attributes.map(attr => 
            `<div><strong></strong> ${Array.isArray(attr.value) ? attr.value.join(', ') : attr.value}</div>`
          ).join('');
        } else if (product.productID && product.productID.attributes && product.productID.attributes.length > 0) {
          // Trường hợp thuộc tính nằm trong productID
          attributesHTML = product.productID.attributes.map(attr => 
            `<div><strong></strong> ${Array.isArray(attr.values) ? attr.values.join(', ') : attr.values}</div>`
          ).join('');
        } else {
          attributesHTML = 'Không có thuộc tính';
        }
        
        // Tạo dòng hiển thị sản phẩm
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>
            ${product.name || (product.productID ? product.productID.name : 'Không có tên')}
          </td>
          <td>
            ${attributesHTML}
          </td>
          <td style="text-align:right;">
            ${product.price ? product.price.toLocaleString() : 0} VND
          </td>
          <td style="text-align:center;">
            ${product.quantity || 1}
          </td>
          <td style="text-align:right;">
            ${productTotal.toLocaleString()} VND
          </td>
        `;
        
        productsContainer.appendChild(row);
      });
    } else {
      // Trường hợp không có sản phẩm
      const emptyRow = document.createElement('tr');
      emptyRow.innerHTML = `
        <td colspan="5" style="text-align:center;">
          Không có sản phẩm nào trong đơn hàng
        </td>
      `;
      productsContainer.appendChild(emptyRow);
    }
    
    // Hiển thị tổng tiền
    document.getElementById('orderDetailTotal').textContent = order.totalAmount ? order.totalAmount.toLocaleString() : '0';
  }

  // Hàm đóng dialog
  function closeOrderDetailDialog() {
  document.getElementById('orderDetailDialog').style.display = 'none';
  document.getElementById('modalOverlay').style.display = 'none';
  
  // Remove any promotion info element that might have been added
  const promotionInfo = document.querySelector('.order-promotion-info');
  if (promotionInfo) {
    promotionInfo.remove();
  }
}
</script>