<%- include('../layouts/main.ejs') %>

<div class="main-content">
  <h1 style="text-align: center;">Danh sách đơn hàng</h1>
  <div class="button-container">
    <a href="/orders/create"><button class="btn" style="background-color: #f4f4f4;display: flex;justify-content: flex-end;">Tạo Đơn
        Hàng</button></a>
  </div>

  <!-- Mục tìm kiếm đơn hàng -->
  <div class="search-container" style="margin-top: 20px; margin-bottom: 20px; padding: 15px; background-color: #f9f9f9; border-radius: 8px;">
    <h3 style="margin-top: 0;">Tìm kiếm đơn hàng</h3>
    <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px;">
      <div>
        <label for="searchOrderID">Mã đơn hàng:</label>
        <input type="text" id="searchOrderID" class="search-input" placeholder="Nhập mã đơn hàng">
      </div>
      <div>
        <label for="searchCustomerName">Tên khách hàng:</label>
        <input type="text" id="searchCustomerName" class="search-input" placeholder="Nhập tên khách hàng">
      </div>
      <div>
        <label for="searchPhone">Số điện thoại:</label>
        <input type="text" id="searchPhone" class="search-input" placeholder="Nhập số điện thoại">
      </div>
      <div>
        <label for="searchAddress">Địa chỉ:</label>
        <input type="text" id="searchAddress" class="search-input" placeholder="Nhập địa chỉ">
      </div>
      <div>
        <label for="searchStatus">Trạng thái:</label>
        <select id="searchStatus" class="search-input">
          <option value="">Tất cả</option>
          <option value="pending">Đang chờ xử lý</option>
          <option value="processing">Đang xử lý</option>
          <option value="shipping">Đang giao hàng</option>
          <option value="delivered">Đã giao hàng</option>
          <option value="canceled">Đã hủy</option>
        </select>
      </div>
      <div>
        <label for="searchFromDate">Từ ngày:</label>
        <input type="date" id="searchFromDate" class="search-input">
      </div>
      <div>
        <label for="searchToDate">Đến ngày:</label>
        <input type="date" id="searchToDate" class="search-input">
      </div>
    </div>
    <div style="margin-top: 15px; text-align: center;">
      <button type="button" onclick="searchOrdersDirectly()" class="btn" style="background-color: #4CAF50; color: white; padding: 8px 15px; margin-right: 10px;">Tìm
        kiếm</button>
      <button type="button" onclick="resetSearch()" class="btn" style="background-color: #f44336; color: white; padding: 8px 15px;">Đặt lại</button>
    </div>
  </div>
  <table style="width: 100%;">
    <thead>
      <tr>
        <th>Mã đơn hàng</th>
        <th>Khách hàng</th>
        <th>Tên sản phẩm</th>
        <th>Tổng tiền</th>
        <th>Trạng thái</th>
        <th>Ngày tạo</th>
        <th>Thao tác</th>
      </tr>
    </thead>
    <tbody>
      <% orders.forEach(order=> { %>
      <tr>
        <td>
          <%= order.orderID %>
        </td>
        <td>
          <%= order.customerID ? order.customerID.fullName : "Unknown Customer" %>
        </td>
        <td>
          <% if (order.products && order.products.length> 0) { %>
          <ul>
            <% order.products.forEach(product=> { %>
            <li>
              <b>
                <%= product.productID ? product.productID.name : product.name || "Không có sản phẩm" %>
              </b> -
              <!-- Hiển thị số lượng sản phẩm, mặc định là 1 nếu không có -->
              <%= product.quantity || 1 %> x
              <%= product.price.toLocaleString("vi-VN") %> VND
        
              <% if (product.productID && product.productID.attributes && product.productID.attributes.length> 0) { %>
              <ul>
                <% product.productID.attributes.forEach(attr=> { %>
                <% if (attr.values && attr.values.length> 0) { %>
                <li><b>
                    <%= attr.name %>
                  </b>: <%= attr.values.join(", ") %></li>
                <% } %>
                <% }) %>
              </ul>
              <% } else if (product.attributes && product.attributes.length > 0) { %>
              <ul>
                <% product.attributes.forEach(attr=> { %>
                <li><b>
                    <%= attr.name %>
                  </b>: <%= Array.isArray(attr.value) ? attr.value.join(", ") : attr.value %></li>
                <% }) %>
              </ul>
              <% } else { %>
              <p>Không có thuộc tính</p>
              <% } %>
            </li>
            <% }) %>
          </ul>
          <% } else { %>
          Không có sản phẩm
          <% } %>
        </td>

        <td><%= order.totalAmount %></td>
        <td><%= order.status %></td>
        <td><%= new Date(order.createdAt).toLocaleString('vi-VN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' }) %></td>
        <td>
          <button class="action-btn view-btn" onclick="viewOrderDetail('<%= order._id %>')">Xem chi tiết</button>
          <button class=" delete-btn" onclick="deleteOrder('<%= order._id %>')">Xóa</button>
        </td>
      </tr>
      <% }) %>
      
    </tbody>
  </table>
  <!-- Dialog xem chi tiết đơn hàng -->
<div id="orderDetailDialog" style="display:none; position:fixed; top:5%; left:10%; width:80%; background:white; padding:20px; border:1px solid black; border-radius:8px; box-shadow:0 4px 8px rgba(0,0,0,0.2); max-height:90%; overflow-y:auto; z-index:1000;">
  <div style="display:flex; justify-content:space-between; align-items:center; margin-bottom:20px;">
    <h2 style="margin:0;">Chi tiết đơn hàng <span id="orderDetailID"></span></h2>
    <button onclick="closeOrderDetailDialog()" style="background:red; color:white; border:none; border-radius:4px; padding:8px 12px; cursor:pointer;">Đóng</button>
  </div>

  <div style="display:grid; grid-template-columns:1fr 1fr; gap:20px; margin-bottom:20px;">
    <div>
      <h3>Thông tin đơn hàng</h3>
      <table style="width:100%; border-collapse:collapse;">
        <tr>
          <td style="font-weight:bold; padding:8px; border-bottom:1px solid #ddd;">Mã đơn hàng:</td>
          <td id="orderDetailOrderID" style="padding:8px; border-bottom:1px solid #ddd;"></td>
        </tr>
        <tr>
          <td style="font-weight:bold; padding:8px; border-bottom:1px solid #ddd;">Ngày tạo:</td>
          <td id="orderDetailCreatedAt" style="padding:8px; border-bottom:1px solid #ddd;"></td>
        </tr>
        <tr>
          <td style="font-weight:bold; padding:8px; border-bottom:1px solid #ddd;">Trạng thái:</td>
          <td id="orderDetailStatus" style="padding:8px; border-bottom:1px solid #ddd;"></td>
        </tr>
        <tr>
          <td style="font-weight:bold; padding:8px; border-bottom:1px solid #ddd;">Nhân viên:</td>
          <td id="orderDetailEmployee" style="padding:8px; border-bottom:1px solid #ddd;"></td>
        </tr>
      </table>
    </div>
    
    <div>
      <h3>Thông tin khách hàng</h3>
      <table style="width:100%; border-collapse:collapse;">
        <tr>
          <td style="font-weight:bold; padding:8px; border-bottom:1px solid #ddd;">Tên khách hàng:</td>
          <td id="orderDetailCustomerName" style="padding:8px; border-bottom:1px solid #ddd;"></td>
        </tr>
        <tr>
          <td style="font-weight:bold; padding:8px; border-bottom:1px solid #ddd;">Số điện thoại:</td>
          <td id="orderDetailCustomerPhone" style="padding:8px; border-bottom:1px solid #ddd;"></td>
        </tr>
        <tr>
          <td style="font-weight:bold; padding:8px; border-bottom:1px solid #ddd;">Email:</td>
          <td id="orderDetailCustomerEmail" style="padding:8px; border-bottom:1px solid #ddd;"></td>
        </tr>
        <tr>
          <td style="font-weight:bold; padding:8px; border-bottom:1px solid #ddd;">Địa chỉ:</td>
          <td id="orderDetailCustomerAddress" style="padding:8px; border-bottom:1px solid #ddd;"></td>
        </tr>
      </table>
    </div>
  </div>

  <h3>Danh sách sản phẩm</h3>
  <table style="width:100%; border-collapse:collapse; margin-bottom:20px;">
    <thead>
      <tr style="background-color:#f2f2f2;">
        <th style="padding:12px; text-align:left; border-bottom:2px solid #ddd;">Sản phẩm</th>
        <th style="padding:12px; text-align:left; border-bottom:2px solid #ddd;">Thuộc tính</th>
        <th style="padding:12px; text-align:right; border-bottom:2px solid #ddd;">Đơn giá</th>
        <th style="padding:12px; text-align:center; border-bottom:2px solid #ddd;">Số lượng</th>
        <th style="padding:12px; text-align:right; border-bottom:2px solid #ddd;">Thành tiền</th>
      </tr>
    </thead>
    <tbody id="orderDetailProducts">
      <!-- Các sản phẩm sẽ được thêm bằng JavaScript -->
    </tbody>
  </table>

  <div style="text-align:right; font-size:18px; font-weight:bold; margin-top:20px;">
    Tổng tiền: <span id="orderDetailTotal"></span> VND
  </div>
</div>
</div>

  <script>
    // Lưu trữ tất cả đơn hàng
    let allOrders = [];

    // Tìm kiếm đơn hàng
    function searchOrders() {
      const orderID = document.getElementById('searchOrderID').value.trim().toLowerCase();
      const customerName = document.getElementById('searchCustomerName').value.trim().toLowerCase();
      const phone = document.getElementById('searchPhone').value.trim().toLowerCase();
      const address = document.getElementById('searchAddress').value.trim().toLowerCase();
      const status = document.getElementById('searchStatus').value;
      const fromDate = document.getElementById('searchFromDate').value;
      const toDate = document.getElementById('searchToDate').value;

      // Chuyển đổi chuỗi ngày thành đối tượng Date để so sánh
      const fromDateObj = fromDate ? new Date(fromDate) : null;
      const toDateObj = toDate ? new Date(toDate) : null;

      // Nếu có toDate, cộng thêm 1 ngày để bao gồm cả ngày kết thúc
      if (toDateObj) {
        toDateObj.setDate(toDateObj.getDate() + 1);
      }

      const filteredOrders = allOrders.filter(order => {
        // Kiểm tra xem đơn hàng có khớp với các tiêu chí tìm kiếm không
        let matchOrderID = true;
        let matchCustomerName = true;
        let matchPhone = true;
        let matchAddress = true;
        let matchStatus = true;
        let matchDateRange = true;

        if (orderID) {
          matchOrderID = order.orderID.toLowerCase().includes(orderID);
        }

        if (customerName && order.customerID) {
          matchCustomerName = order.customerID.fullName.toLowerCase().includes(customerName);
        }

        // Vì chúng ta không có thông tin phoneNumber và address trong đối tượng order
        // từ DOM, nên chúng ta đặt thành true nếu không có dữ liệu tìm kiếm
        // Trong thực tế, bạn cần thêm thông tin này vào đối tượng order khi trích xuất dữ liệu
        if (phone) {
          // Sử dụng toàn bộ nội dung của hàng để tìm kiếm SĐT
          matchPhone = order._originalRow.textContent.toLowerCase().includes(phone);
        }

        if (address) {
          // Sử dụng toàn bộ nội dung của hàng để tìm kiếm địa chỉ
          matchAddress = order._originalRow.textContent.toLowerCase().includes(address);
        }

        if (status) {
          matchStatus = order.status.toLowerCase() === status.toLowerCase();
        }

        if (fromDateObj || toDateObj) {
          // Format in table is "HH:MM DD/MM/YYYY"
          try {
            // Phân tích chuỗi ngày "HH:MM DD/MM/YYYY"
            const dateTimeParts = order.createdAt.split(' ');
            if (dateTimeParts.length === 2) {
              const timeParts = dateTimeParts[0].split(':');
              const dateParts = dateTimeParts[1].split('/');

              if (timeParts.length === 2 && dateParts.length === 3) {
                const hour = parseInt(timeParts[0], 10);
                const minute = parseInt(timeParts[1], 10);
                const day = parseInt(dateParts[0], 10);
                const month = parseInt(dateParts[1], 10) - 1; // JavaScript tháng từ 0-11
                const year = parseInt(dateParts[2], 10);

                const orderDate = new Date(year, month, day, hour, minute);

                // Set hours to beginning of day for fromDate (00:00:00)
                if (fromDateObj) {
                  const fromDateStart = new Date(fromDateObj);
                  fromDateStart.setHours(0, 0, 0, 0);

                  if (toDateObj) {
                    // Set hours to end of day for toDate (23:59:59)
                    const toDateEnd = new Date(toDateObj);
                    toDateEnd.setHours(23, 59, 59, 999);

                    matchDateRange = orderDate >= fromDateStart && orderDate <= toDateEnd;
                  } else {
                    matchDateRange = orderDate >= fromDateStart;
                  }
                } else if (toDateObj) {
                  // Set hours to end of day for toDate (23:59:59)
                  const toDateEnd = new Date(toDateObj);
                  toDateEnd.setHours(23, 59, 59, 999);

                  matchDateRange = orderDate <= toDateEnd;
                }
              } else {
                matchDateRange = false; // Định dạng ngày không hợp lệ
              }
            } else {
              matchDateRange = false; // Định dạng ngày không hợp lệ
            }
          } catch (error) {
            console.error("Lỗi khi phân tích ngày:", error);
            matchDateRange = false;
          }
        }

        // Đơn hàng phải khớp với tất cả các tiêu chí tìm kiếm đã nhập
        return matchOrderID && matchCustomerName && matchPhone && matchAddress && matchStatus && matchDateRange;
      });

      displayOrders(filteredOrders);
    }

    // Hiển thị danh sách đơn hàng
    function displayOrders(orders) {
      const tableBody = document.querySelector('table tbody');
      tableBody.innerHTML = ''; // Xóa nội dung cũ

      if (orders.length === 0) {
        tableBody.innerHTML = `
                    <tr>
                        <td colspan="7" style="text-align: center;">Không tìm thấy đơn hàng nào</td>
                    </tr>
                `;
        return;
      }

      orders.forEach(order => {
        // Sử dụng HTML đã lưu trữ cho phần sản phẩm
        const row = `
                    <tr>
                        <td>${order.orderID}</td>
                        <td>${order.customerID.fullName}</td>
                        <td>${order.productsHTML || 'Không có sản phẩm'}</td>
                        <td>${order.totalAmount}</td>
                        <td>${order.status}</td>
                        <td>${order.createdAt}</td>
                        <td>
                            <button class="delete-btn" onclick="deleteOrder('${order._id}')">Xóa</button>
                        </td>
                    </tr>
                `;

        tableBody.innerHTML += row;
      });
    }

    // Reset tìm kiếm
    function resetSearch() {
      document.getElementById('searchOrderID').value = '';
      document.getElementById('searchCustomerName').value = '';
      document.getElementById('searchPhone').value = '';
      document.getElementById('searchAddress').value = '';
      document.getElementById('searchStatus').value = '';
      document.getElementById('searchFromDate').value = '';
      document.getElementById('searchToDate').value = '';

      displayOrders(allOrders);
    }

    function deleteOrder(orderId) {
      if (confirm('Bạn có chắc chắn muốn xóa đơn hàng này không?')) {
        fetch(`/orders/${orderId}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.message) {
              alert(data.message);
              window.location.reload(); // Tải lại trang sau khi xóa thành công
            }
          })
          .catch(error => {
            console.error('Lỗi khi xóa đơn hàng:', error);
            alert('Có lỗi xảy ra khi xóa đơn hàng');
          });
      }
    }

    // Khởi tạo trang
    window.onload = function() {
      // Thêm console.log để debug
      console.log("Page loaded");

      // Lưu trữ tất cả đơn hàng từ dữ liệu được render bởi server
      allOrders = Array.from(document.querySelectorAll('table tbody tr')).map(row => {
        const order = {
          _id: row.querySelector('.delete-btn').onclick.toString().match(/'([^']+)'/)[1],
          orderID: row.cells[0].textContent,
          customerID: {
            fullName: row.cells[1].textContent
          },
          // Lưu trữ HTML của sản phẩm thay vì mảng rỗng
          productsHTML: row.cells[2].innerHTML,
          totalAmount: row.cells[3].textContent,
          status: row.cells[4].textContent,
          // Lưu trữ text nguyên gốc thay vì chuyển thành đối tượng Date
          createdAt: row.cells[5].textContent,
          // Lưu trữ tham chiếu đến row gốc để truy cập dễ dàng hơn sau này
          _originalRow: row
        };

        // Debug: Console log mỗi đơn hàng
        console.log("Đơn hàng được phát hiện:", {
          id: order._id,
          orderID: order.orderID,
          customer: order.customerID.fullName,
          date: order.createdAt
        });

        return order;
      });

      console.log("Tổng số đơn hàng:", allOrders.length);

      // Kiểm tra các phần tử DOM
      const searchBtn = document.getElementById('searchBtn');
      const resetBtn = document.getElementById('resetBtn');
      const fromDateInput = document.getElementById('searchFromDate');
      const toDateInput = document.getElementById('searchToDate');

      console.log("Các phần tử DOM:", {
        searchBtn: !!searchBtn,
        resetBtn: !!resetBtn,
        fromDateInput: !!fromDateInput,
        toDateInput: !!toDateInput
      });

      // Thêm sự kiện cho nút tìm kiếm và reset với console.log để debug
      if (searchBtn) {
        searchBtn.addEventListener('click', function() {
          console.log("Nút tìm kiếm được nhấn");
          searchOrders();
        });
      } else {
        console.error("Không tìm thấy nút tìm kiếm!");
      }

      if (resetBtn) {
        resetBtn.addEventListener('click', function() {
          console.log("Nút đặt lại được nhấn");
          resetSearch();
        });
      } else {
        console.error("Không tìm thấy nút đặt lại!");
      }
    };
  </script>

  <script>
    // Hàm gọi trực tiếp cho nút tìm kiếm
    function searchOrdersDirectly() {
      console.log("Hàm tìm kiếm trực tiếp được gọi");

      try {
        const orderID = document.getElementById('searchOrderID').value.trim().toLowerCase();
        const customerName = document.getElementById('searchCustomerName').value.trim().toLowerCase();
        const phone = document.getElementById('searchPhone').value.trim().toLowerCase();
        const address = document.getElementById('searchAddress').value.trim().toLowerCase();
        const status = document.getElementById('searchStatus').value;
        const fromDate = document.getElementById('searchFromDate').value;
        const toDate = document.getElementById('searchToDate').value;

        console.log("Giá trị tìm kiếm:", {
          orderID,
          customerName,
          phone,
          address,
          status,
          fromDate,
          toDate
        });

        if (fromDate || toDate) {
          console.log("Tìm kiếm với khoảng ngày");

          // Lấy đơn hàng từ DOM
          const tableRows = document.querySelectorAll('table tbody tr');
          console.log("Số dòng trong bảng:", tableRows.length);

          // Lọc dòng dựa trên ngày
          const matchedRows = Array.from(tableRows).filter(row => {
            // Lấy ngày của đơn hàng (cột thứ 6)
            const dateCell = row.cells[5].textContent;
            console.log("Ngày của đơn hàng:", dateCell);

            // Phân tích ngày
            try {
              const dateParts = dateCell.split(' ');
              if (dateParts.length !== 2) return false;

              const timeParts = dateParts[0].split(':');
              const datePieces = dateParts[1].split('/');

              if (timeParts.length !== 2 || datePieces.length !== 3) return false;

              const day = parseInt(datePieces[0], 10);
              const month = parseInt(datePieces[1], 10) - 1;
              const year = parseInt(datePieces[2], 10);

              const orderDate = new Date(year, month, day);
              console.log("Đơn hàng ngày:", orderDate);

              let isMatch = true;

              // Kiểm tra với fromDate
              if (fromDate) {
                const fromDateParts = fromDate.split('-');
                const fromYear = parseInt(fromDateParts[0], 10);
                const fromMonth = parseInt(fromDateParts[1], 10) - 1;
                const fromDay = parseInt(fromDateParts[2], 10);

                const fromDateObj = new Date(fromYear, fromMonth, fromDay);
                console.log("Từ ngày:", fromDateObj);

                if (orderDate < fromDateObj) {
                  isMatch = false;
                }
              }

              // Kiểm tra với toDate
              if (toDate && isMatch) {
                const toDateParts = toDate.split('-');
                const toYear = parseInt(toDateParts[0], 10);
                const toMonth = parseInt(toDateParts[1], 10) - 1;
                const toDay = parseInt(toDateParts[2], 10);

                const toDateObj = new Date(toYear, toMonth, toDay);
                // Thêm 1 ngày để bao gồm cả ngày kết thúc
                toDateObj.setDate(toDateObj.getDate() + 1);
                console.log("Đến ngày (cộng 1):", toDateObj);

                if (orderDate >= toDateObj) {
                  isMatch = false;
                }
              }

              console.log("Đơn hàng phù hợp:", isMatch);
              return isMatch;
            } catch (error) {
              console.error("Lỗi khi phân tích ngày:", error);
              return false;
            }
          });

          console.log("Số dòng phù hợp:", matchedRows.length);

          // Hiển thị hoặc ẩn các dòng
          tableRows.forEach(row => {
            row.style.display = 'none'; // Ẩn tất cả
          });

          matchedRows.forEach(row => {
            row.style.display = ''; // Hiển thị các dòng phù hợp
          });

          if (matchedRows.length === 0) {
            // Hiển thị thông báo không tìm thấy
            const tbody = document.querySelector('table tbody');
            const emptyRow = document.createElement('tr');
            emptyRow.id = 'empty-result-row';
            emptyRow.innerHTML = `<td colspan="7" style="text-align: center;">Không tìm thấy đơn hàng nào phù hợp</td>`;
            tbody.appendChild(emptyRow);
          }
        } else {
          // Xử lý tìm kiếm thông thường với các trường khác
          if (typeof searchOrders === 'function') {
            searchOrders();
          } else {
            console.error("Hàm searchOrders không được định nghĩa!");
          }
        }
      } catch (error) {
        console.error("Lỗi khi tìm kiếm:", error);
      }
    }
    // Hàm mở dialog xem chi tiết đơn hàng
function viewOrderDetail(orderId) {
  // Hiển thị loading hoặc spinner nếu cần
  document.getElementById('orderDetailDialog').style.display = 'block';
  
  // Gọi API để lấy thông tin chi tiết đơn hàng
  fetch(`/orders/${orderId}/detail`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json'
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      displayOrderDetail(data.order);
    } else {
      alert("Không thể lấy thông tin đơn hàng: " + data.message);
      closeOrderDetailDialog();
    }
  })
  .catch(error => {
    console.error("Lỗi khi lấy thông tin đơn hàng:", error);
    alert("Có lỗi xảy ra khi lấy thông tin đơn hàng. Vui lòng thử lại!");
    closeOrderDetailDialog();
  });
}

// Hàm hiển thị thông tin chi tiết đơn hàng
function displayOrderDetail(order) {
  // Hiển thị thông tin đơn hàng
  document.getElementById('orderDetailID').textContent = order._id;
  document.getElementById('orderDetailOrderID').textContent = order.orderID;
  
  // Định dạng ngày tạo
  const createdDate = new Date(order.createdAt);
  const formattedDate = `${createdDate.getDate()}/${createdDate.getMonth() + 1}/${createdDate.getFullYear()} ${createdDate.getHours()}:${String(createdDate.getMinutes()).padStart(2, '0')}`;
  document.getElementById('orderDetailCreatedAt').textContent = formattedDate;
  
  // Hiển thị trạng thái đơn hàng
  const statusMap = {
    'pending': 'Đang chờ xử lý',
    'processing': 'Đang xử lý',
    'shipping': 'Đang giao hàng',
    'delivered': 'Đã giao hàng',
    'canceled': 'Đã hủy'
  };
  document.getElementById('orderDetailStatus').textContent = statusMap[order.status] || order.status;
  
  // Hiển thị thông tin nhân viên
  document.getElementById('orderDetailEmployee').textContent = 
    order.employeeID ? `${order.employeeID.fullName} (${order.employeeID.position})` : 'Không có';
  
  // Hiển thị thông tin khách hàng
  if (order.customerID) {
    document.getElementById('orderDetailCustomerName').textContent = order.customerID.fullName || 'Không có';
    document.getElementById('orderDetailCustomerPhone').textContent = order.customerID.phoneNumber || 'Không có';
    document.getElementById('orderDetailCustomerEmail').textContent = order.customerID.email || 'Không có';
    document.getElementById('orderDetailCustomerAddress').textContent = order.customerID.address || 'Không có';
  } else {
    document.getElementById('orderDetailCustomerName').textContent = 'Không có';
    document.getElementById('orderDetailCustomerPhone').textContent = 'Không có';
    document.getElementById('orderDetailCustomerEmail').textContent = 'Không có';
    document.getElementById('orderDetailCustomerAddress').textContent = 'Không có';
  }
  
  // Hiển thị danh sách sản phẩm
  const productsContainer = document.getElementById('orderDetailProducts');
  productsContainer.innerHTML = ''; // Xóa nội dung cũ
  
  if (order.products && order.products.length > 0) {
    order.products.forEach(product => {
      // Tính tổng tiền cho từng sản phẩm
      const productTotal = product.price * (product.quantity || 1);
      
      // Tạo chuỗi hiển thị thuộc tính
      let attributesHTML = '';
      if (product.attributes && product.attributes.length > 0) {
        attributesHTML = product.attributes.map(attr => 
          `<div><strong>${attr.name}:</strong> ${Array.isArray(attr.value) ? attr.value.join(', ') : attr.value}</div>`
        ).join('');
      } else if (product.productID && product.productID.attributes && product.productID.attributes.length > 0) {
        // Trường hợp thuộc tính nằm trong productID
        attributesHTML = product.productID.attributes.map(attr => 
          `<div><strong>${attr.name}:</strong> ${Array.isArray(attr.values) ? attr.values.join(', ') : attr.values}</div>`
        ).join('');
      } else {
        attributesHTML = 'Không có thuộc tính';
      }
      
      // Tạo dòng hiển thị sản phẩm
      const row = document.createElement('tr');
      row.innerHTML = `
        <td style="padding:12px; border-bottom:1px solid #ddd;">
          ${product.name || (product.productID ? product.productID.name : 'Không có tên')}
        </td>
        <td style="padding:12px; border-bottom:1px solid #ddd;">
          ${attributesHTML}
        </td>
        <td style="padding:12px; text-align:right; border-bottom:1px solid #ddd;">
          ${product.price ? product.price.toLocaleString() : 0} VND
        </td>
        <td style="padding:12px; text-align:center; border-bottom:1px solid #ddd;">
          ${product.quantity || 1}
        </td>
        <td style="padding:12px; text-align:right; border-bottom:1px solid #ddd;">
          ${productTotal.toLocaleString()} VND
        </td>
      `;
      
      productsContainer.appendChild(row);
    });
  } else {
    // Trường hợp không có sản phẩm
    const emptyRow = document.createElement('tr');
    emptyRow.innerHTML = `
      <td colspan="5" style="padding:12px; text-align:center; border-bottom:1px solid #ddd;">
        Không có sản phẩm nào trong đơn hàng
      </td>
    `;
    productsContainer.appendChild(emptyRow);
  }
  
  // Hiển thị tổng tiền
  document.getElementById('orderDetailTotal').textContent = order.totalAmount ? order.totalAmount.toLocaleString() : '0';
}

// Hàm đóng dialog
function closeOrderDetailDialog() {
  document.getElementById('orderDetailDialog').style.display = 'none';
}
  </script>