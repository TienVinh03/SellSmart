<%- include('../layouts/main.ejs') %>

<div class="main-content">
    <!-- Header Section -->
    <div class="dashboard-header">
        <h1>Tổng Quan</h1>
        <div class="period-selector">
            <button class="btn btn-outline-primary active" data-period="day">Ngày</button>
            <button class="btn btn-outline-primary" data-period="week">Tuần</button>
            <button class="btn btn-outline-primary" data-period="month">Tháng</button>
            <button class="btn btn-outline-primary" data-period="custom" data-bs-toggle="modal" data-bs-target="#customDateModal">Tùy chọn</button>
        </div>
    </div>

    <!-- Custom Date Range Modal -->
    <div class="modal fade" id="customDateModal" tabindex="-1" aria-labelledby="customDateModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="customDateModalLabel">Chọn khoảng thời gian</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="startDatePicker" class="form-label">Từ ngày</label>
                        <input type="date" class="form-control" id="startDatePicker">
                    </div>
                    <div class="mb-3">
                        <label for="endDatePicker" class="form-label">Đến ngày</label>
                        <input type="date" class="form-control" id="endDatePicker">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary" id="applyCustomDateBtn">Áp dụng</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Stats Cards -->
    <div class="row stats-cards">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card stats-card h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Doanh Thu</h6>
                            <h3 class="mb-0" id="totalRevenue">0 ₫</h3>
                            <small class="text-success">+15% so với hôm qua</small>
                        </div>
                        <div class="stats-icon bg-primary">
                            <i class="fas fa-dollar-sign"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card stats-card h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Đơn Hàng</h6>
                            <h3 class="mb-0" id="totalOrders">0</h3>
                            <small class="text-success">+8% so với hôm qua</small>
                        </div>
                        <div class="stats-icon bg-warning">
                            <i class="fas fa-shopping-cart"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card stats-card h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Khách Hàng</h6>
                            <h3 class="mb-0" id="totalCustomers">0</h3>
                            <small class="text-success">+12% so với hôm qua</small>
                        </div>
                        <div class="stats-icon bg-success">
                            <i class="fas fa-users"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card stats-card h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Sản Phẩm</h6>
                            <h3 class="mb-0" id="totalProducts">0</h3>
                            <small class="text-success">+5% so với hôm qua</small>
                        </div>
                        <div class="stats-icon bg-info">
                            <i class="fas fa-box"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="row">
        <!-- Revenue Chart -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold">Biểu Đồ Doanh Thu</h6>
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            Thời Gian
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#">Hôm nay</a></li>
                            <li><a class="dropdown-item" href="#">Tuần này</a></li>
                            <li><a class="dropdown-item" href="#">Tháng này</a></li>
                        </ul>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="revenueChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Orders Distribution -->
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header">
                    <h6 class="m-0 font-weight-bold">Phân Bố Đơn Hàng</h6>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="orderDistributionChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Best Selling Products and Employee Performance -->
    <div class="row">
        <!-- Best Selling Products -->
        <div class="col-xl-6">
            <div class="card shadow mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold">Sản Phẩm Bán Chạy</h6>
                    <button class="btn btn-sm btn-primary">Xem tất cả</button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Sản phẩm</th>
                                    <th>Đã bán</th>
                                    <th>Doanh thu</th>
                                    <th>Tồn kho</th>
                                </tr>
                            </thead>
                            <tbody id="bestSellingProducts">
                                <tr>
                                    <td colspan="4" class="text-center">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Employee Performance -->
        <div class="col-xl-6">
            <div class="card shadow mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold">HIỆU SUẤT NHÂN VIÊN</h6>
                    <button class="btn btn-sm btn-primary">Xem tất cả</button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Nhân viên</th>
                                    <th>Đơn hàng</th>
                                    <th>Doanh số</th>
                                    <th>Tỷ lệ</th>
                                </tr>
                            </thead>
                            <tbody id="employeePerformanceTable">
                                <tr>
                                    <td colspan="4" class="text-center">Đang tải dữ liệu...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Payment Stats -->
    <div class="row">
        <!-- Payment Stats -->
        <div class="col-xl-12">
            <div class="card shadow mb-4">
                <div class="card-header">
                    <h6 class="m-0 font-weight-bold">Thống Kê Thanh Toán</h6>
                </div>
                <div class="card-body">
                    <div class="payment-stats">
                        <!-- Payment Methods -->
                        <div class="payment-method mb-4">
                            <h6 class="text-muted mb-3">Phương thức thanh toán</h6>
                            <div class="payment-method-list">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div class="d-flex align-items-center">
                                        <div class="payment-icon bg-primary">
                                            <i class="fas fa-money-bill-wave"></i>
                                        </div>
                                        <span class="ms-2">Tiền mặt</span>
                                    </div>
                                    <span class="fw-bold" id="cashAmount">0 ₫</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div class="d-flex align-items-center">
                                        <div class="payment-icon bg-success">
                                            <i class="fas fa-university"></i>
                                        </div>
                                        <span class="ms-2">Chuyển khoản</span>
                                    </div>
                                    <span class="fw-bold" id="bankAmount">0 ₫</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        <div class="payment-icon bg-info">
                                            <i class="fas fa-wallet"></i>
                                        </div>
                                        <span class="ms-2">Ví điện tử</span>
                                    </div>
                                    <span class="fw-bold" id="eWalletAmount">0 ₫</span>
                                </div>
                            </div>
                        </div>

                        <!-- Payment Status -->
                        <div class="payment-status">
                            <h6 class="text-muted mb-3">Trạng thái thanh toán</h6>
                            <div class="status-cards">
                                <div class="status-card bg-success-light mb-2">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span>Đã thanh toán</span>
                                        <span class="fw-bold" id="paidCount">0</span>
                                    </div>
                                    <div class="progress mt-2">
                                        <div class="progress-bar bg-success" role="progressbar" style="width: 0%" id="paidProgress"></div>
                                    </div>
                                </div>
                                <div class="status-card bg-warning-light">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span>Chưa thanh toán</span>
                                        <span class="fw-bold" id="unpaidCount">0</span>
                                    </div>
                                    <div class="progress mt-2">
                                        <div class="progress-bar bg-warning" role="progressbar" style="width: 0%" id="unpaidProgress"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Order List Section -->
    <div class="row">
        <div class="col-xl-12">
            <div class="card shadow mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold">Danh Sách Đơn Hàng</h6>
                    <a href="/orders" class="btn btn-sm btn-primary">Xem tất cả</a>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Mã đơn hàng</th>
                                    <th>Khách hàng</th>
                                    <th>Tổng tiền</th>
                                    <th>Trạng thái</th>
                                    <th>Thanh toán</th>
                                    <th>Ngày tạo</th>
                                    <th>Thao tác</th>
                                </tr>
                            </thead>
                            <tbody id="orderListTable">
                                <tr>
                                    <td colspan="7" class="text-center">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Pagination -->
                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <div class="pagination-info">
                            Hiển thị <span id="orderStartIndex">0</span>-<span id="orderEndIndex">0</span> trên tổng số <span id="orderTotalCount">0</span> đơn hàng
                        </div>
                        <nav>
                            <ul class="pagination mb-0" id="orderPagination">
                                <li class="page-item disabled">
                                    <a class="page-link" href="#" aria-label="Previous" id="orderPrevPage">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                                <li class="page-item active"><a class="page-link" href="#">1</a></li>
                                <li class="page-item disabled">
                                    <a class="page-link" href="#" aria-label="Next" id="orderNextPage">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Order Detail Modal -->
<div class="modal fade" id="orderDetailModal" tabindex="-1" aria-labelledby="orderDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderDetailModalLabel">Chi tiết đơn hàng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="fw-bold">Thông tin đơn hàng</h6>
                        <table class="table table-sm">
                            <tbody>
                                <tr>
                                    <td>Mã đơn hàng:</td>
                                    <td id="modal-order-id"></td>
                                </tr>
                                <tr>
                                    <td>Ngày tạo:</td>
                                    <td id="modal-order-date"></td>
                                </tr>
                                <tr>
                                    <td>Trạng thái:</td>
                                    <td id="modal-order-status"></td>
                                </tr>
                                <tr>
                                    <td>Thanh toán:</td>
                                    <td id="modal-order-payment"></td>
                                </tr>
                                <tr>
                                    <td>Nhân viên:</td>
                                    <td id="modal-order-employee">Không xác định</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6 class="fw-bold">Thông tin khách hàng</h6>
                        <table class="table table-sm">
                            <tbody>
                                <tr>
                                    <td>Tên:</td>
                                    <td id="modal-customer-name"></td>
                                </tr>
                                <tr>
                                    <td>Số điện thoại:</td>
                                    <td id="modal-customer-phone"></td>
                                </tr>
                                <tr>
                                    <td>Email:</td>
                                    <td id="modal-customer-email"></td>
                                </tr>
                                <tr>
                                    <td>Địa chỉ:</td>
                                    <td id="modal-customer-address"></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <h6 class="fw-bold mt-3">Sản phẩm</h6>
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Sản phẩm</th>
                                <th>Số lượng</th>
                                <th>Đơn giá</th>
                                <th>Thành tiền</th>
                            </tr>
                        </thead>
                        <tbody id="modal-order-products">
                            <!-- Products will be added here -->
                        </tbody>
                    </table>
                </div>
                
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="fw-bold">Ghi chú</h6>
                        <p id="modal-order-notes" class="border p-2 rounded">Không có ghi chú</p>
                    </div>
                    <div class="col-md-6">
                        <table class="table table-sm">
                            <tbody>
                                <tr>
                                    <td>Tổng tiền sản phẩm:</td>
                                    <td id="modal-subtotal" class="text-end"></td>
                                </tr>
                                <tr>
                                    <td>Giảm giá:</td>
                                    <td id="modal-discount" class="text-end"></td>
                                </tr>
                                <tr class="fw-bold">
                                    <td>Tổng thanh toán:</td>
                                    <td id="modal-total" class="text-end"></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                 </div>
        </div>
    </div>
</div>

<!-- Custom CSS -->
<style>
.dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding: 1rem 0;
}

.period-selector {
    display: flex;
    gap: 8px;
}

.period-selector .btn {
    transition: all 0.2s ease;
    border-radius: 8px;
    padding: 8px 12px;
    font-weight: 500;
}

.period-selector .btn.active {
    background-color: #4e73df;
    color: white;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.period-selector button[data-period="custom"] {
    background-color: #f8f9fc;
    border-color: #4e73df;
    color: #4e73df;
}

.period-selector button[data-period="custom"].active {
    background-color: #4e73df;
    color: white;
}

.period-selector button[data-period="custom"]:hover:not(.active) {
    background-color: rgba(78, 115, 223, 0.1);
}

.stats-card {
    border: none;
    border-radius: 10px;
    box-shadow: 0 0.15rem 1.75rem rgba(0, 0, 0, 0.15);
    transition: transform 0.3s ease;
}

.stats-card:hover {
    transform: translateY(-5px);
}

.stats-icon {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.stats-icon i {
    color: white;
    font-size: 1.5rem;
}

.bg-primary { background-color: #4e73df; }
.bg-success { background-color: #1cc88a; }
.bg-warning { background-color: #f6c23e; }
.bg-info { background-color: #36b9cc; }

.chart-container {
    position: relative;
    height: 300px;
    width: 100%;
}

.real-time-stats .rt-stat {
    background: #f8f9fc;
    padding: 1rem;
    border-radius: 8px;
    text-align: center;
}

.real-time-stats .rt-stat h4 {
    font-size: 0.9rem;
    color: #5a5c69;
    margin-bottom: 0.5rem;
}

.real-time-stats .rt-stat p {
    font-size: 1.5rem;
    font-weight: bold;
    margin: 0;
    color: #4e73df;
}

.real-time-chart {
    margin-top: 2rem;
    height: 200px;
}

.payment-stats {
    padding: 0.5rem;
}

.payment-icon {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
}

.payment-icon i {
    font-size: 1rem;
}

.status-card {
    padding: 0.75rem;
    border-radius: 8px;
}

.bg-success-light {
    background-color: rgba(28, 200, 138, 0.1);
}

.bg-warning-light {
    background-color: rgba(246, 194, 62, 0.1);
}

.progress {
    height: 6px;
    border-radius: 3px;
    background-color: rgba(0, 0, 0, 0.05);
}

.table {
    font-size: 0.9rem;
}

.table th {
    font-weight: 600;
    border-top: none;
}

.card {
    border: none;
    margin-bottom: 1.5rem;
    box-shadow: 0 0.15rem 1.75rem rgba(0, 0, 0, 0.15);
    border-radius: 10px;
}

.card-header {
    background-color: white;
    border-bottom: 1px solid rgba(0,0,0,0.125);
    padding: 1rem 1.25rem;
}

.card-header h6 {
    color: #4e73df;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.dropdown-toggle::after {
    display: none;
}

@media (max-width: 768px) {
    .dashboard-header {
        flex-direction: column;
        align-items: flex-start;
    }

    .period-selector {
        margin-top: 1rem;
    }

    .real-time-stats .rt-stat {
        margin-bottom: 1rem;
    }
}

/* Add styles for order status badges */
.status-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
}

.status-pending {
    background-color: #f6c23e;
    color: #856404;
}

.status-processing {
    background-color: #4e73df;
    color: white;
}

.status-canceled {
    background-color: #e74a3b;
    color: white;
}

.payment-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
}

.payment-paid {
    background-color: #1cc88a;
    color: white;
}

.payment-unpaid {
    background-color: #e74a3b;
    color: white;
}

.payment-partpaid {
    background-color: #f6c23e;
    color: #856404;
}

.order-action-btn {
    padding: 4px 8px;
    font-size: 12px;
    margin-right: 5px;
}
</style>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Custom JavaScript -->
<script>
// Format currency function
function formatCurrency(amount) {
    if (amount >= 1000000) {
        const millions = Math.floor(amount / 1000000);
        const remainder = amount % 1000000;
        if (remainder === 0) {
            return `${millions}tr`;
        }
        const decimal = Math.floor(remainder / 100000) / 10;
        return `${millions},${decimal}tr`;
    }
    return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount);
}

// Biến lưu trữ biểu đồ doanh thu
let revenueChart = null;

// Hàm cập nhật biểu đồ doanh thu
async function updateRevenueChart(dateRange) {
    try {
        console.log('Fetching revenue data with date range:', dateRange);
        const url = new URL('/orders/daily-revenue', window.location.origin);
        
        // Add period parameter
        if (dateRange) {
            url.searchParams.append('period', dateRange.period);
            url.searchParams.append('startDate', dateRange.startDate);
            url.searchParams.append('endDate', dateRange.endDate);
        }
        
        const response = await fetch(url);
        const data = await response.json();

        if (data.status !== 'Ok' || !data.data) {
            console.error('Error fetching revenue data:', data);
            return;
        }

        const ctx = document.getElementById('revenueChart').getContext('2d');
        
        // Get the period and data
        const period = data.data.period || 'day';
        const labels = data.data.labels || [];
        const revenueData = data.data.revenue || [];
        
        // Customize chart type and options based on period
        let chartType = 'bar';
        let barThickness = 20;
        let chartTitle = '';
        
        switch(period) {
            case 'day':
                // Use default bar chart for hourly data
                chartTitle = 'Doanh thu theo giờ (7:00 - 21:00)';
                barThickness = 25;
                break;
            case 'week':
                // Wider bars for days of week
                chartTitle = 'Doanh thu theo ngày trong tuần';
                barThickness = 40;
                break;
            case 'month':
                // Wider bars for weeks of month
                chartTitle = 'Doanh thu theo tuần trong tháng';
                barThickness = 60;
                break;
        }

        // Hủy biểu đồ cũ nếu tồn tại
        if (revenueChart) {
            revenueChart.destroy();
        }

        // Tạo gradient cho background
        const gradient = ctx.createLinearGradient(0, 0, 0, 400);
        gradient.addColorStop(0, 'rgba(78, 115, 223, 0.2)');
        gradient.addColorStop(1, 'rgba(78, 115, 223, 0)');

        revenueChart = new Chart(ctx, {
            type: chartType,
            data: {
                labels: labels,
                datasets: [{
                    label: 'Doanh thu',
                    data: revenueData,
                    backgroundColor: 'rgba(78, 115, 223, 0.8)',
                    borderColor: 'rgba(78, 115, 223, 1)',
                    borderWidth: 1,
                    barThickness: barThickness,
                    fill: true,
                    backgroundColor: gradient
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: chartTitle || (dateRange ? dateRange.label : 'Hôm nay'),
                        font: {
                            size: 16
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const value = context.raw;
                                return formatCurrency(value);
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        grid: {
                            display: false
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return formatCurrency(value);
                            }
                        }
                    }
                }
            }
        });
    } catch (error) {
        console.error('Error in updateRevenueChart:', error);
    }
}

// Fetch best-selling products with date range
async function fetchBestSellingProducts(dateRange) {
    try {
        console.log('Fetching best-selling products with date range:', dateRange);
        const tableBody = document.getElementById('bestSellingProducts');
        tableBody.innerHTML = '<tr><td colspan="4" class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></td></tr>';
        
        const url = new URL('/products/sales', window.location.origin);
        
        // Add date range parameters
        if (dateRange) {
            url.searchParams.append('startDate', dateRange.startDate);
            url.searchParams.append('endDate', dateRange.endDate);
        }
        
        const response = await fetch(url);
        const data = await response.json();
        
        if (data.status !== 'Ok' && !Array.isArray(data.data)) {
            throw new Error('Invalid data format');
        }
        
        tableBody.innerHTML = '';
        
        if (data.data.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="4" class="text-center">Không có dữ liệu sản phẩm</td></tr>';
            return;
        }
        
        // Định dạng tiền tệ
        const formatter = new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        });
        
        // Hiển thị top 5 sản phẩm bán chạy nhất
        data.data.slice(0, 5).forEach(product => {
            const row = document.createElement('tr');
            
            row.innerHTML = `
                <td>
                    <div class="d-flex align-items-center">
                        <img src="${product.thumbnail || '/images/default-product.png'}" 
                             alt="${product.name}" 
                             class="me-2" 
                             style="width: 40px; height: 40px; object-fit: cover; border-radius: 4px;">
                        <div>
                            <p class="fw-bold mb-0">${product.name}</p>
                          
                            ${product.attributes && product.attributes.length > 0 ? 
                                `<p class="text-muted mb-0 small">${product.attributes.map(attr => 
                                    `${attr.value[0]}`
                                ).join(' / ')}</p>` : ''}
                        </div>
                    </div>
                </td>
                <td>${product.totalSold || 0}</td>
                <td>${formatter.format(product.revenue || 0)}</td>
                <td>${product.inventory || 0}</td>
            `;
            
            tableBody.appendChild(row);
        });
    } catch (error) {
        console.error('Error fetching best selling products:', error);
        document.getElementById('bestSellingProducts').innerHTML = 
            `<tr><td colspan="4" class="text-center">Lỗi khi tải dữ liệu: ${error.message}</td></tr>`;
    }
}

// Add styles for product thumbnail
const style = document.createElement('style');
style.textContent = `
    .product-thumbnail {
        width: 40px;
        height: 40px;
        object-fit: cover;
        border-radius: 4px;
    }
`;
document.head.appendChild(style);

// Function to fetch dashboard statistics
async function fetchDashboardStats(dateRange) {
    try {
        console.log('Fetching dashboard stats with date range:', dateRange);
        const url = new URL('/products/dashboard-stats', window.location.origin);
        
        // Add date range parameters
        if (dateRange) {
            url.searchParams.append('startDate', dateRange.startDate);
            url.searchParams.append('endDate', dateRange.endDate);
        }
        
        const response = await fetch(url);
        const data = await response.json();
        
        if (data.status === "Ok") {
            const stats = data.data;
            
            // Format currency
            const formatter = new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            });
            
            // Cập nhật doanh thu
            const totalRevenueElement = document.getElementById('totalRevenue');
            totalRevenueElement.textContent = formatter.format(stats.totalRevenue);
            updateChangePercentage(totalRevenueElement, stats.percentageChanges.revenue);
            
            // Cập nhật đơn hàng
            const totalOrdersElement = document.getElementById('totalOrders');
            totalOrdersElement.textContent = stats.totalOrders;
            updateChangePercentage(totalOrdersElement, stats.percentageChanges.orders);
            
            // Cập nhật khách hàng
            const totalCustomersElement = document.getElementById('totalCustomers');
            totalCustomersElement.textContent = stats.totalCustomers;
            updateChangePercentage(totalCustomersElement, stats.percentageChanges.customers);
            
            // Cập nhật số sản phẩm
            const totalProductsElement = document.getElementById('totalProducts');
            totalProductsElement.textContent = stats.totalProducts;
            updateChangePercentage(totalProductsElement, stats.percentageChanges.products);
        }
    } catch (error) {
        console.error('Error fetching dashboard stats:', error);
    }
}

// Hàm hỗ trợ cập nhật phần trăm thay đổi
function updateChangePercentage(element, percentage) {
    const changeElement = element.nextElementSibling;
    if (changeElement) {
        const change = parseInt(percentage);
        changeElement.textContent = `${change > 0 ? '+' : ''}${change}% so với hôm qua`;
        changeElement.className = change >= 0 ? 'text-success' : 'text-danger';
    }
}

// Fetch employee performance data
async function fetchEmployeePerformance(dateRange) {
    try {
        console.log('Fetching employee performance data with date range:', dateRange);
        const url = new URL('/orders/employee-performance', window.location.origin);
        
        // Add date range parameters
        if (dateRange) {
            url.searchParams.append('startDate', dateRange.startDate);
            url.searchParams.append('endDate', dateRange.endDate);
        }
        
        const response = await fetch(url);
        console.log('Response status:', response.status);
        
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Received employee performance data:', data);
        
        const tableBody = document.getElementById('employeePerformanceTable');
        tableBody.innerHTML = '';
        
        if (!data || !data.data || !data.data.employees || data.data.employees.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="4" class="text-center">Không có dữ liệu hiệu suất</td></tr>';
            return;
        }
        
        // Sort employees by contribution for top performers
        const employees = data.data.employees.sort((a, b) => 
            parseFloat(b.performance.contribution) - parseFloat(a.performance.contribution)
        );
        
        employees.forEach(employee => {
            const row = document.createElement('tr');
            
            // Determine display name, preferring fullName but falling back to username if needed
            const displayName = employee.fullName || employee.username || 'Không xác định';
            
            // Format currency
            const formatter = new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND'
            });
            
            // Calculate contribution value for progress bar
            const contributionValue = parseFloat(employee.performance.contribution);
            
            // Create HTML for the row
            row.innerHTML = `
                <td>
                    <div class="d-flex align-items-center">
                        <img src="${employee.avatar || '/images/default_user.png'}" 
                             alt="${displayName}" 
                             class="rounded-circle mr-2" 
                             style="width: 40px; height: 40px; object-fit: cover;">
                        <div class="ms-3">
                            <p class="fw-bold mb-1">${displayName}</p>
                        </div>
                    </div>
                </td>
                <td>${employee.orderCount}</td>
                <td>${formatter.format(employee.totalRevenue)}</td>
                <td>
                    <div class="d-flex align-items-center">
                        <span class="me-2">${contributionValue}%</span>
                        <div class="progress" style="height: 8px; width: 100px;">
                            <div class="progress-bar bg-primary" 
                                 role="progressbar" 
                                 style="width: ${Math.min(contributionValue, 100)}%;" 
                                 aria-valuenow="${contributionValue}" 
                                 aria-valuemin="0" 
                                 aria-valuemax="100">
                            </div>
                        </div>
                    </div>
                </td>
            `;
            
            tableBody.appendChild(row);
        });
    } catch (error) {
        console.error('Error fetching employee performance:', error);
        document.getElementById('employeePerformanceTable').innerHTML = 
            `<tr><td colspan="4" class="text-center">Lỗi khi tải dữ liệu: ${error.message}</td></tr>`;
    }
}

// Update payment statistics
async function updatePaymentStats(dateRange) {
    console.log('=== STARTING PAYMENT STATS UPDATE ===');
    try {
        console.log('1. Initiating fetch request to /orders/payment-stats with date range:', dateRange);
        const url = new URL('/orders/payment-stats', window.location.origin);
        
        // Add date range parameters
        if (dateRange) {
            url.searchParams.append('startDate', dateRange.startDate);
            url.searchParams.append('endDate', dateRange.endDate);
        }
        
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        });
        
        console.log('2. Response received:', {
            status: response.status,
            ok: response.ok,
            statusText: response.statusText,
            headers: Object.fromEntries(response.headers.entries())
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);
        }
        
        console.log('3. Parsing response data...');
        const text = await response.text();
        console.log('Raw response:', text);
        
        const data = JSON.parse(text);
        console.log('4. Parsed data:', JSON.stringify(data, null, 2));
        
        if (data.status === "Ok") {
            const stats = data.data;
            console.log('5. Processing payment stats:', JSON.stringify(stats, null, 2));
            
            // Cập nhật số tiền theo phương thức thanh toán
            const cashAmount = stats.methods.cash || 0;
            const bankAmount = stats.methods.bank || 0;
            const eWalletAmount = stats.methods.eWallet || 0;
            
            console.log('6. Updating payment methods:', {
                cash: cashAmount,
                bank: bankAmount,
                eWallet: eWalletAmount
            });

            document.getElementById('cashAmount').textContent = formatCurrency(cashAmount);
            document.getElementById('bankAmount').textContent = formatCurrency(bankAmount);
            document.getElementById('eWalletAmount').textContent = formatCurrency(eWalletAmount);

            // Cập nhật trạng thái thanh toán
            const paidCount = stats.status.paid || 0;
            const unpaidCount = stats.status.unpaid || 0;
            const total = paidCount + unpaidCount;

            console.log('7. Updating payment status:', {
                paid: paidCount,
                unpaid: unpaidCount,
                total: total
            });

            document.getElementById('paidCount').textContent = paidCount;
            document.getElementById('unpaidCount').textContent = unpaidCount;

            // Tính và cập nhật phần trăm
            const paidPercentage = total > 0 ? (paidCount / total * 100).toFixed(1) : 0;
            const unpaidPercentage = total > 0 ? (unpaidCount / total * 100).toFixed(1) : 0;

            console.log('8. Updating progress bars:', {
                paidPercentage,
                unpaidPercentage
            });

            document.getElementById('paidProgress').style.width = `${paidPercentage}%`;
            document.getElementById('unpaidProgress').style.width = `${unpaidPercentage}%`;

            // Thêm tooltip hiển thị phần trăm
            document.getElementById('paidCount').title = `${paidPercentage}%`;
            document.getElementById('unpaidCount').title = `${unpaidPercentage}%`;
            
            console.log('9. Payment stats update completed successfully');
        } else {
            console.error('Invalid response format:', data);
            throw new Error('Invalid response format');
        }
    } catch (error) {
        console.error('Error in updatePaymentStats:', error);
        console.error('Error details:', {
            name: error.name,
            message: error.message,
            stack: error.stack
        });
        
        // Reset all values to 0 and show formatted currency
        document.getElementById('cashAmount').textContent = formatCurrency(0);
        document.getElementById('bankAmount').textContent = formatCurrency(0);
        document.getElementById('eWalletAmount').textContent = formatCurrency(0);
        document.getElementById('paidCount').textContent = '0';
        document.getElementById('unpaidCount').textContent = '0';
        document.getElementById('paidProgress').style.width = '0%';
        document.getElementById('unpaidProgress').style.width = '0%';
    } finally {
        console.log('=== PAYMENT STATS UPDATE COMPLETED ===');
    }
}

// Biến lưu trữ biểu đồ phân bố đơn hàng
let orderDistributionChart = null;

// Hàm cập nhật biểu đồ phân bố đơn hàng
async function updateOrderDistribution(dateRange) {
    console.log('Đang cập nhật biểu đồ phân bố đơn hàng với date range:', dateRange);
    try {
        const url = new URL('/orders/order-distribution', window.location.origin);
        
        // Add date range parameters
        if (dateRange) {
            url.searchParams.append('startDate', dateRange.startDate);
            url.searchParams.append('endDate', dateRange.endDate);
            
            // Add period parameter if available
            if (dateRange.period) {
                url.searchParams.append('period', dateRange.period);
            }
        }
        
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const result = await response.json();
        console.log('Dữ liệu nhận được từ API:', result);
        
        if (result.status === 'Ok' && result.data) {
            const data = result.data;
            console.log('Dữ liệu phân bố đơn hàng:', data);

            // Kiểm tra tính hợp lệ của dữ liệu
            if (!data.processing || !data.canceled || !data.pending) {
                throw new Error('Dữ liệu không đầy đủ');
            }

            // Biến đổi dữ liệu cho biểu đồ - chỉ hiển thị 3 trạng thái: đang xử lý, đã hủy, chờ xử lý
            const chartData = {
                labels: ['Đã xử lý', 'Đã hủy', 'Chưa xử lý'],
                counts: [
                    data.processing.count || 0, 
                    data.canceled.count || 0, 
                    data.pending.count || 0
                ],
                percentages: [
                    parseFloat(data.processing.percentage || 0), 
                    parseFloat(data.canceled.percentage || 0), 
                    parseFloat(data.pending.percentage || 0)
                ],
                // Màu sắc: xanh dương cho đang xử lý, đỏ cho đã hủy, vàng cho chờ xử lý
                colors: ['#4e73df', '#e74a3b', '#f6c23e']
            };

            // Tính lại phần trăm dựa trên tổng của 3 loại
            const total = chartData.counts.reduce((a, b) => a + b, 0);
            if (total > 0) {
                chartData.percentages = chartData.counts.map(count => parseFloat(((count / total) * 100).toFixed(1)));
            }

            // Tạo biểu đồ
            const ctx = document.getElementById('orderDistributionChart');
            
            // Destroy chart if it exists
            if (orderDistributionChart) {
                orderDistributionChart.destroy();
            }
            
            orderDistributionChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: chartData.labels,
                    datasets: [{
                        data: chartData.counts,
                        backgroundColor: chartData.colors,
                        hoverBackgroundColor: chartData.colors.map(color => color + 'CC'),
                        hoverBorderColor: 'white'
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20,
                                boxWidth: 12
                            }
                        },
                        title: {
                            display: true,
                            text: 'Phân bố đơn hàng ' + (dateRange ? dateRange.label : 'Hôm nay')
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw;
                                    const index = context.dataIndex;
                                    const percentage = chartData.percentages[index];
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    },
                    cutout: '70%'
                }
            });

            // Thêm tổng số đơn hàng vào giữa biểu đồ
            const totalOrders = total || data.total || 0;
            const centerText = {
                id: 'centerText',
                afterDraw(chart) {
                    const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
                    ctx.save();
                    ctx.font = 'bold 14px Arial';
                    ctx.fillStyle = '#666';
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillText(`Tổng: ${totalOrders}`, width / 2 + left, height / 2 + top);
                    ctx.restore();
                }
            };
            orderDistributionChart.options.plugins.centerText = centerText;
            
            console.log('Biểu đồ đã được cập nhật thành công');
        } else {
            throw new Error('Dữ liệu không hợp lệ từ API');
        }
    } catch (error) {
        console.error('Lỗi khi cập nhật biểu đồ phân bố đơn hàng:', error);
        // Hiển thị thông báo lỗi trong biểu đồ
        const ctx = document.getElementById('orderDistributionChart');
        if (ctx && orderDistributionChart) {
            orderDistributionChart.destroy();
        }
        if (ctx) {
            const errorChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Lỗi'],
                    datasets: [{
                        data: [1],
                        backgroundColor: ['#e74a3b']
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            enabled: false
                        }
                    }
                }
            });
        }
    }
}

// Initialize everything when page loads
document.addEventListener('DOMContentLoaded', function() {
    console.log('=== DOM Content Loaded - Starting Dashboard Initialization ===');
    
    try {
        // Set up period selector
        const periodButtons = document.querySelectorAll('.period-selector button');
        let currentPeriod = 'day'; // Default period
        let customDateRange = null;
        
        // Initialize date range based on default period (day)
        let dateRange = getDateRangeForPeriod(currentPeriod);
        
        // Set default values for date pickers (last 7 days)
        const today = new Date();
        const lastWeek = new Date(today);
        lastWeek.setDate(today.getDate() - 7);
        
        document.getElementById('startDatePicker').valueAsDate = lastWeek;
        document.getElementById('endDatePicker').valueAsDate = today;
        
        // Add click event listeners to period buttons
        periodButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Skip if clicking on the custom date button (modal will handle it)
                if (this.getAttribute('data-period') === 'custom' && this.hasAttribute('data-bs-toggle')) {
                    return;
                }
                
                // Remove active class from all buttons
                periodButtons.forEach(btn => btn.classList.remove('active'));
                
                // Add active class to clicked button
                this.classList.add('active');
                
                // Update current period
                currentPeriod = this.getAttribute('data-period');
                
                // Get date range for the selected period (use custom dates if needed)
                if (currentPeriod === 'custom') {
                    dateRange = getDateRangeForPeriod(currentPeriod, customDateRange);
                } else {
                    dateRange = getDateRangeForPeriod(currentPeriod);
                }
                console.log(`Period changed to ${currentPeriod}:`, dateRange);
                
                // Reload all dashboard data with new date range
                reloadDashboardData(dateRange);
            });
        });
        
        // Handle custom date selection
        document.getElementById('applyCustomDateBtn').addEventListener('click', function() {
            const modal = bootstrap.Modal.getInstance(document.getElementById('customDateModal'));
            
            // Get selected dates
            const startDate = document.getElementById('startDatePicker').value;
            const endDate = document.getElementById('endDatePicker').value;
            
            if (!startDate || !endDate) {
                alert('Vui lòng chọn ngày bắt đầu và ngày kết thúc');
                return;
            }
            
            // Validate date range
            if (new Date(endDate) < new Date(startDate)) {
                alert('Ngày kết thúc phải sau ngày bắt đầu');
                return;
            }
            
            // Save custom date range
            customDateRange = {
                startDate: startDate,
                endDate: endDate
            };
            
            // Update current period
            currentPeriod = 'custom';
            
            // Update active button
            periodButtons.forEach(btn => btn.classList.remove('active'));
            document.querySelector('button[data-period="custom"]').classList.add('active');
            
            // Get date range for the custom period
            dateRange = getDateRangeForPeriod('custom', customDateRange);
            console.log('Custom date range applied:', dateRange);
            
            // Reload all dashboard data with new date range
            reloadDashboardData(dateRange);
            
            // Close the modal
            modal.hide();
        });
        
        // Fetch initial data
        console.log('2. Fetching initial data...');
        reloadDashboardData(dateRange);
        
        // Set up intervals for updates
        console.log('4. Setting up update intervals...');
        setInterval(() => {
            console.log('Running periodic updates...');
            if (currentPeriod !== 'custom') {
                // Only auto-refresh for standard periods (not custom ranges)
                dateRange = getDateRangeForPeriod(currentPeriod);
                reloadDashboardData(dateRange);
            }
        }, 300000); // Every 5 minutes
        
        console.log('=== Dashboard Initialization Completed ===');
    } catch (error) {
        console.error('Critical error during dashboard initialization:', error);
    }
});

// Function to reload all dashboard data
function reloadDashboardData(dateRange) {
    updateRevenueChart(dateRange).catch(err => console.error('Error updating revenue chart:', err));
    fetchBestSellingProducts(dateRange).catch(err => console.error('Error fetching best selling products:', err));
    fetchDashboardStats(dateRange).catch(err => console.error('Error fetching dashboard stats:', err));
    fetchEmployeePerformance(dateRange).catch(err => console.error('Error fetching employee performance:', err));
    updatePaymentStats(dateRange).catch(err => console.error('Error updating payment stats:', err));
    updateOrderDistribution(dateRange).catch(err => console.error('Error updating order distribution:', err));
    fetchOrdersList(dateRange, 1).catch(err => console.error('Error fetching orders list:', err));
}

// Order list variables
let currentOrderPage = 1;
let totalOrderPages = 1;
let ordersPerPage = 5;
let currentOrderDateRange = null;

// Function to fetch orders list with pagination
async function fetchOrdersList(dateRange, page = 1) {
    try {
        console.log('Fetching orders list with date range:', dateRange, 'page:', page);
        currentOrderDateRange = dateRange;
        currentOrderPage = page;
        
        const tableBody = document.getElementById('orderListTable');
        tableBody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </td>
            </tr>
        `;
        
        const url = new URL('/orders/list-json', window.location.origin);
        
        // Add parameters
        url.searchParams.append('page', page);
        url.searchParams.append('limit', ordersPerPage);
        
        if (dateRange) {
            url.searchParams.append('startDate', dateRange.startDate);
            url.searchParams.append('endDate', dateRange.endDate);
            
            // Add period parameter if available
            if (dateRange.period) {
                url.searchParams.append('period', dateRange.period);
            }
        }
        
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Orders data:', data);
        
        if (data.status === 'Ok' && data.data) {
            // Update pagination info
            totalOrderPages = data.data.totalPages || 1;
            const totalOrders = data.data.totalOrders || 0;
            
            const startIndex = (page - 1) * ordersPerPage + 1;
            const endIndex = Math.min(page * ordersPerPage, totalOrders);
            
            document.getElementById('orderStartIndex').textContent = startIndex;
            document.getElementById('orderEndIndex').textContent = endIndex;
            document.getElementById('orderTotalCount').textContent = totalOrders;
            
            // Clear table
            tableBody.innerHTML = '';
            
            // Check if there are orders
            if (!data.data.orders || data.data.orders.length === 0) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center">Không có đơn hàng nào trong khoảng thời gian này</td>
                    </tr>
                `;
                return;
            }
            
            // Format currency
            const formatter = new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND'
            });
            
            // Add orders to table
            data.data.orders.forEach(order => {
                const row = document.createElement('tr');
                
                // Format date
                const orderDate = new Date(order.createdAt);
                const formattedDate = `${orderDate.getDate()}/${orderDate.getMonth() + 1}/${orderDate.getFullYear()} ${orderDate.getHours()}:${String(orderDate.getMinutes()).padStart(2, '0')}`;
                
                // Status badge
                const statusClass = `status-${order.status}`;
                const statusText = order.status === 'pending' ? 'Chưa xử lý' :
                                   order.status === 'processing' ? 'Đã xử lý' :
                                   order.status === 'canceled' ? 'Đã hủy' : order.status;
                                   
                // Payment badge
                const paymentClass = `payment-${order.paymentStatus}`;
                const paymentText = order.paymentStatus === 'paid' ? 'Đã thanh toán' :
                                   order.paymentStatus === 'unpaid' ? 'Chưa thanh toán' :
                                   order.paymentStatus === 'partpaid' ? 'Thanh toán một phần' : order.paymentStatus;
                
                // Customer name
                const customerName = order.customerID ? (order.customerID.fullName || 'Khách hàng') : 'Khách hàng';

                row.innerHTML = `
                    <td>${order.orderID || '-'}</td>
                    <td>${customerName}</td>
                    <td>${formatter.format(order.totalAmount || 0)}</td>
                    <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                    <td><span class="payment-badge ${paymentClass}">${paymentText}</span></td>
                    <td>${formattedDate}</td>
                    <td>
                        <button class="btn btn-sm btn-primary order-action-btn view-order-btn" data-order-id="${order._id}">
                            <i class="fas fa-eye"></i> Xem
                        </button>
                    </td>
                `;
                
                tableBody.appendChild(row);
            });
            
            // Add event listeners to view buttons
            document.querySelectorAll('.view-order-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const orderId = this.getAttribute('data-order-id');
                    showOrderDetail(orderId);
                });
            });
            
            // Update pagination
            updateOrderPagination(page, totalOrderPages);
        } else {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="7" class="text-center">Lỗi khi tải dữ liệu: ${data.message || 'Unknown error'}</td>
                </tr>
            `;
        }
    } catch (error) {
        console.error('Error fetching orders list:', error);
        document.getElementById('orderListTable').innerHTML = `
            <tr>
                <td colspan="7" class="text-center">Lỗi khi tải dữ liệu: ${error.message}</td>
            </tr>
        `;
    }
}

// Function to update order pagination
function updateOrderPagination(currentPage, totalPages) {
    const pagination = document.getElementById('orderPagination');
    pagination.innerHTML = '';
    
    // Previous button
    const prevItem = document.createElement('li');
    prevItem.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
    prevItem.innerHTML = `
        <a class="page-link" href="#" aria-label="Previous" id="orderPrevPage">
            <span aria-hidden="true">&laquo;</span>
        </a>
    `;
    pagination.appendChild(prevItem);
    
    // Page numbers
    const displayPages = 5; // Number of page links to display
    let startPage = Math.max(1, currentPage - Math.floor(displayPages / 2));
    let endPage = Math.min(totalPages, startPage + displayPages - 1);
    
    // Adjust start page if we're at the end
    if (endPage - startPage + 1 < displayPages) {
        startPage = Math.max(1, endPage - displayPages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
        const pageItem = document.createElement('li');
        pageItem.className = `page-item ${i === currentPage ? 'active' : ''}`;
        pageItem.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
        pagination.appendChild(pageItem);
    }
    
    // Next button
    const nextItem = document.createElement('li');
    nextItem.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
    nextItem.innerHTML = `
        <a class="page-link" href="#" aria-label="Next" id="orderNextPage">
            <span aria-hidden="true">&raquo;</span>
        </a>
    `;
    pagination.appendChild(nextItem);
    
    // Add event listeners
    document.querySelectorAll('#orderPagination .page-link').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            if (this.id === 'orderPrevPage' && currentPage > 1) {
                fetchOrdersList(currentOrderDateRange, currentPage - 1);
            } else if (this.id === 'orderNextPage' && currentPage < totalPages) {
                fetchOrdersList(currentOrderDateRange, currentPage + 1);
            } else if (this.getAttribute('data-page')) {
                const page = parseInt(this.getAttribute('data-page'));
                if (page !== currentPage) {
                    fetchOrdersList(currentOrderDateRange, page);
                }
            }
        });
    });
}

// Function to show order detail
async function showOrderDetail(orderId) {
    try {
        console.log('Fetching order detail for:', orderId);
        
        const url = new URL(`/orders/${orderId}/detail-json`, window.location.origin);
        const response = await fetch(url);
        
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Order detail data:', data);
        
        if (data.status === 'Ok' && data.data) {
            const order = data.data;
            
            // Format currency
            const formatter = new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND'
            });
            
            // Format date
            const orderDate = new Date(order.createdAt);
            const formattedDate = `${orderDate.getDate()}/${orderDate.getMonth() + 1}/${orderDate.getFullYear()} ${orderDate.getHours()}:${String(orderDate.getMinutes()).padStart(2, '0')}`;
            
            // Status text
            const statusText = order.status === 'pending' ? 'Chờ xử lý' :
                              order.status === 'processing' ? 'Đang xử lý' :
                              order.status === 'canceled' ? 'Đã hủy' : order.status;
                              
            // Payment text
            const paymentText = order.paymentStatus === 'paid' ? 'Đã thanh toán' :
                              order.paymentStatus === 'unpaid' ? 'Chưa thanh toán' :
                              order.paymentStatus === 'partpaid' ? 'Thanh toán một phần' : order.paymentStatus;
            
            // Update modal content
            document.getElementById('modal-order-id').textContent = order.orderID || '-';
            document.getElementById('modal-order-date').textContent = formattedDate;
            document.getElementById('modal-order-status').innerHTML = `<span class="status-badge status-${order.status}">${statusText}</span>`;
            document.getElementById('modal-order-payment').innerHTML = `<span class="payment-badge payment-${order.paymentStatus}">${paymentText}</span>`;
            
            // Employee info
            const employeeElement = document.getElementById('modal-order-employee');
            if (order.employeeID) {
                if (typeof order.employeeID === 'object') {
                    const employeeName = order.employeeID.fullName || 'N/A';
                    const position = order.employeeID.position ? ` (${order.employeeID.position})` : '';
                    employeeElement.textContent = employeeName + position;
                } else {
                    employeeElement.textContent = "ID: " + order.employeeID;
                }
            } else {
                employeeElement.textContent = "Không xác định";
            }
            
            // Customer info
            document.getElementById('modal-customer-name').textContent = order.customerID ? order.customerID.fullName || '-' : '-';
            document.getElementById('modal-customer-phone').textContent = order.customerID ? order.customerID.phoneNumber || '-' : '-';
            document.getElementById('modal-customer-email').textContent = order.customerID ? order.customerID.email || '-' : '-';
            document.getElementById('modal-customer-address').textContent = order.customerID ? order.customerID.address || '-' : '-';
            
            // Notes
            document.getElementById('modal-order-notes').textContent = order.notes || 'Không có ghi chú';
            
            // Products
            const productsContainer = document.getElementById('modal-order-products');
            productsContainer.innerHTML = '';
            
            if (order.products && order.products.length > 0) {
                order.products.forEach(product => {
                    const row = document.createElement('tr');
                    
                    // Product name with attributes
                    let productName = product.name || 'Sản phẩm không xác định';
                    if (product.attributes && product.attributes.length > 0) {
                        const attributesList = product.attributes.map(attr => {
                            if (Array.isArray(attr.value)) {
                                return `${attr.name}: ${attr.value.join(', ')}`;
                            }
                            return `${attr.name}: ${attr.value}`;
                        }).join(' / ');
                        
                        productName += `<br><small class="text-muted">${attributesList}</small>`;
                    }
                    
                    const quantity = product.quantity || 1;
                    const price = product.price || 0;
                    const total = quantity * price;
                    
                    row.innerHTML = `
                        <td>${productName}</td>
                        <td>${quantity}</td>
                        <td>${formatter.format(price)}</td>
                        <td>${formatter.format(total)}</td>
                    `;
                    
                    productsContainer.appendChild(row);
                });
            } else {
                productsContainer.innerHTML = `
                    <tr>
                        <td colspan="4" class="text-center">Không có sản phẩm</td>
                    </tr>
                `;
            }
            
            // Calculate subtotal and discount
            const subtotal = order.originalAmount || order.totalAmount || 0;
            const total = order.totalAmount || 0;
            const discount = subtotal - total;
            
            document.getElementById('modal-subtotal').textContent = formatter.format(subtotal);
            document.getElementById('modal-discount').textContent = formatter.format(discount);
            document.getElementById('modal-total').textContent = formatter.format(total);
            
            // Set button URL
        
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('orderDetailModal'));
            modal.show();
        } else {
            alert(`Error: ${data.message || 'Could not load order details'}`);
        }
    } catch (error) {
        console.error('Error showing order detail:', error);
        alert(`Error: ${error.message}`);
    }
}

// Function to get date range for a given period
function getDateRangeForPeriod(period, customDates = null) {
    const now = new Date();
    let startDate, endDate;
    
    switch (period) {
        case 'custom':
            // Use provided custom dates
            if (customDates && customDates.startDate && customDates.endDate) {
                startDate = new Date(customDates.startDate);
                startDate.setHours(0, 0, 0, 0);
                
                endDate = new Date(customDates.endDate);
                endDate.setHours(23, 59, 59);
            } else {
                // Default to last 7 days if no custom dates provided
                endDate = new Date(now);
                startDate = new Date(now);
                startDate.setDate(startDate.getDate() - 7);
                startDate.setHours(0, 0, 0, 0);
            }
            break;
            
        case 'day':
            // Today: from 00:00:00 to 23:59:59 of the current day
            startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
            endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
            break;
            
        case 'week':
            // Current week: from Monday 00:00:00 to Sunday 23:59:59
            const dayOfWeek = now.getDay(); // 0 = Sunday, 1 = Monday, etc.
            const daysFromMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Convert to 0 = Monday, 6 = Sunday
            
            startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() - daysFromMonday, 0, 0, 0);
            endDate = new Date(startDate);
            endDate.setDate(startDate.getDate() + 6);
            endDate.setHours(23, 59, 59);
            break;
            
        case 'month':
            // Current month: from 1st day 00:00:00 to last day 23:59:59
            startDate = new Date(now.getFullYear(), now.getMonth(), 1, 0, 0, 0);
            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59); // Last day of current month
            break;
            
        default:
            // Default to today
            startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
            endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
    }
    
    return {
        startDate: startDate.toISOString(),
        endDate: endDate.toISOString(),
        label: getPeriodLabel(period, startDate, endDate),
        period: period
    };
}

// Function to generate human-readable label for the time period
function getPeriodLabel(period, startDate, endDate) {
    const formatDate = (date) => {
        return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
    };
    
    switch (period) {
        case 'day':
            return `Ngày ${formatDate(startDate)}`;
        case 'week':
            return `Tuần từ ${formatDate(startDate)} đến ${formatDate(endDate)}`;
        case 'month':
            const monthNames = ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6', 
                               'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'];
            return `${monthNames[startDate.getMonth()]} ${startDate.getFullYear()}`;
        case 'custom':
            return `${formatDate(startDate)} - ${formatDate(endDate)}`;
        default:
            return `${formatDate(startDate)} - ${formatDate(endDate)}`;
    }
}
</script>

