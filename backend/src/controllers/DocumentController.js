const mongoose = require("mongoose");
const Document = require("../models/Document");
const Product = require("../models/Product");
const User = require("../models/User");

// T·∫°o t√†i li·ªáu m·ªõi
const createDocument = async (req, res) => {
  try {
    const { product_id, title, description, media } = req.body;

    if (!product_id || !title || !description) {
      req.flash("error_msg", "D·ªØ li·ªáu t√†i li·ªáu kh√¥ng h·ª£p l·ªá");
      return res.redirect("/documents");
    }

    if (!mongoose.Types.ObjectId.isValid(product_id)) {
      req.flash("error_msg", "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá");
      return res.redirect("/documents");
    }

    // Assuming we have a default system admin or using the logged-in user
    let user_id = req.user ? req.user._id : null;
    
    // If no user is available, find the first admin user to use as default
    if (!user_id) {
      try {
        const adminUser = await User.findOne({ role: 'admin' }).sort({ createdAt: 1 });
        if (adminUser) {
          user_id = adminUser._id;
        }
      } catch (err) {
        console.log('Could not find an admin user, document will be created without user_id');
      }
    }

    const newDocument = new Document({
      product_id,
      user_id, // This will be null if no user found, which is fine since we made it optional
      title,
      description,
      media: media || "",
      date: new Date(),
    });

    await newDocument.save();
    req.flash("success_msg", "T·∫°o t√†i li·ªáu m·ªõi th√†nh c√¥ng");
    res.redirect("/documents");
  } catch (error) {
    console.error("Error creating document:", error);
    req.flash("error_msg", "Kh√¥ng th·ªÉ t·∫°o t√†i li·ªáu m·ªõi");
    res.redirect("/documents");
  }
};

// L·∫•y t·∫•t c·∫£ t√†i li·ªáu
const getAllDocuments = async (req, res) => {
  try {
    const documents = await Document.find().populate("product_id");
    console.log("‚úÖ L·∫•y danh s√°ch t√†i li·ªáu:", documents);
    res.render("dashboard/documents", {
      documents,
      products: await Product.find(),
      users: await User.find(),
      success_msg: req.flash("success_msg"),
      error_msg: req.flash("error_msg"),
      page: "documents",
      title: "Qu·∫£n l√Ω t√†i li·ªáu",
    });
  } catch (error) {
    console.error("üî• L·ªói server khi l·∫•y danh s√°ch t√†i li·ªáu:", error);
    req.flash("error_msg", "L·ªói m√°y ch·ªß n·ªôi b·ªô: " + error.message);
    res.redirect("/documents");
  }
};

// Hi·ªÉn th·ªã trang t·∫°o t√†i li·ªáu
const createDocumentScreen = async (req, res) => {
  try {
    const products = await Product.find();
    const users = await User.find();
    console.log("üìå S·∫£n ph·∫©m:", products);
    console.log("üìå Ng∆∞·ªùi d√πng:", users);
    res.render("dashboard/documents", {
      products,
      users,
      documents: [],
      success_msg: req.flash("success_msg"),
      error_msg: req.flash("error_msg"),
    });
  } catch (error) {
    console.error("üî• L·ªói khi t·∫£i trang t·∫°o t√†i li·ªáu:", error);
    req.flash("error_msg", "L·ªói server khi t·∫£i trang: " + error.message);
    res.redirect("/documents");
  }
};

// L·∫•y t√†i li·ªáu theo ID
const getDocumentById = async (req, res) => {
  try {
    const document = await Document.findById(req.params.id).populate("product_id");
    if (!document)
      return res.status(404).json({ message: "T√†i li·ªáu kh√¥ng t·ªìn t·∫°i" });
    res.json(document);
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// C·∫≠p nh·∫≠t t√†i li·ªáu
const updateDocument = async (req, res) => {
  try {
    const { product_id, title, description, media } = req.body;

    if (!product_id || !title || !description) {
      req.flash("error_msg", "D·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß");
      return res.redirect("/documents");
    }

    if (!mongoose.Types.ObjectId.isValid(product_id)) {
      req.flash("error_msg", "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá");
      return res.redirect("/documents");
    }

    const updatedDocument = await Document.findByIdAndUpdate(
      req.params.id,
      {
        product_id,
        title,
        description,
        media: media || "",
        date: new Date(),
      },
      { new: true }
    );

    if (!updatedDocument) {
      req.flash("error_msg", "T√†i li·ªáu kh√¥ng t·ªìn t·∫°i");
      return res.redirect("/documents");
    }

    req.flash("success_msg", "C·∫≠p nh·∫≠t t√†i li·ªáu th√†nh c√¥ng!");
    res.redirect("/documents");
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t t√†i li·ªáu:", error);
    req.flash("error_msg", "L·ªói khi c·∫≠p nh·∫≠t t√†i li·ªáu: " + error.message);
    res.redirect("/documents");
  }
};

// X√≥a t√†i li·ªáu
const deleteDocument = async (req, res) => {
  try {
    const document = await Document.findByIdAndDelete(req.params.id);
    if (!document) {
      req.flash("error_msg", "T√†i li·ªáu kh√¥ng t·ªìn t·∫°i");
      return res.redirect("/documents");
    }
    req.flash("success_msg", "T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng");
    res.redirect("/documents");
  } catch (error) {
    console.error("L·ªói khi x√≥a t√†i li·ªáu:", error);
    req.flash("error_msg", "L·ªói khi x√≥a t√†i li·ªáu: " + error.message);
    res.redirect("/documents");
  }
};

module.exports = {
  createDocument,
  getAllDocuments,
  getDocumentById,
  updateDocument,
  deleteDocument,
  createDocumentScreen,
};
