
const mongoose = require("mongoose");
const Promotion = require("../models/Promotion");

const getPromotions = async (req, res) => {
  try {
    console.log("üöÄ [getPromotions] B·∫Øt ƒë·∫ßu l·∫•y danh s√°ch khuy·∫øn m√£i...");
    const promotions = await Promotion.find().lean();
    console.log("‚úÖ [getPromotions] D·ªØ li·ªáu t·ª´ MongoDB:", JSON.stringify(promotions, null, 2));

    if (!Array.isArray(promotions)) {
      console.log("‚ùå [getPromotions] D·ªØ li·ªáu kh√¥ng ph·∫£i m·∫£ng, tr·∫£ v·ªÅ m·∫£ng r·ªóng");
      return res.render("promotions", { promotions: [], promo: emptyPromo });
    }

    if (promotions.length === 0) {
      console.log("‚ö†Ô∏è [getPromotions] Kh√¥ng c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ m·∫£ng r·ªóng");
      return res.render("promotions", { promotions: [], promo: emptyPromo });
    }

    const emptyPromo = {
      _id: "",
      name: "",
      discount: 0,
      minOrderValue: 0,
      maxDiscount: 0,
      status: "inactive",
      startDate: "",
      endDate: "",
    };

    console.log("üìã [getPromotions] D·ªØ li·ªáu tr∆∞·ªõc khi render:", {
      promotions: promotions.length,
      promo: emptyPromo,
    });
    console.log("üé® [getPromotions] Render giao di·ªán EJS...");
    res.render("promotions", {
      promotions,
      promo: emptyPromo,
      admin: req.session.admin || null, // ƒê·ªÉ tr√°nh l·ªói avatar
      page: "promotions", // Th√™m bi·∫øn page ƒë·ªÉ x·ª≠ l√Ω active sidebar
    });
    
  } catch (error) {
    console.error("üî• [getPromotions] L·ªói l·∫•y danh s√°ch khuy·∫øn m√£i:", {
      message: error.message,
      stack: error.stack,
    });
    throw error;
  }
};




// üü¢ L·∫•y danh s√°ch khuy·∫øn m√£i d·∫°ng JSON
const getPromotionAsJson = async (req, res) => {
  try {
    const promotions = await Promotion.find();
    res.json(promotions);
  } catch (error) {
    console.error("üî• L·ªói l·∫•y danh s√°ch khuy·∫øn m√£i JSON:", error);
    res.status(500).json({ message: "L·ªói server khi l·∫•y d·ªØ li·ªáu!" });
  }
};


// üü¢ L·∫•y khuy·∫øn m√£i theo ID
const getPromotionById = async (req, res) => {
  try {
    const { promotionId } = req.params;
    const promo = await Promotion.findById(promotionId).lean();

    // L·∫•y danh s√°ch t·∫•t c·∫£ khuy·∫øn m√£i ƒë·ªÉ render l·∫°i trang
    const promotions = await Promotion.find().lean();

    if (!promo) {
      return res.status(404).send("‚ùå Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i!");
    }

    res.render("promotions", { promotions, promo });
  } catch (error) {
    console.error("üî• L·ªói khi l·∫•y khuy·∫øn m√£i theo ID:", error);
    res.status(500).send("L·ªói server khi l·∫•y d·ªØ li·ªáu khuy·∫øn m√£i!");
  }
};


// üü¢ Th√™m khuy·∫øn m√£i m·ªõi
const addPromotion = async (req, res) => {
  try {
    const { name, discount,  minOrderValue, maxDiscount, startDate, endDate } = req.body;

    if (!name || !discount  || !minOrderValue || !maxDiscount || !startDate || !endDate) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    const newPromotion = new Promotion({
      name: name.trim(),
      discount,
      
      minOrderValue,
      maxDiscount,
      status: "active",
      startDate,
      endDate,
    });

    await newPromotion.save();
    res.status(201).json({ message: "‚úÖ Th√™m khuy·∫øn m√£i th√†nh c√¥ng!", promotion: newPromotion });
  } catch (error) {
    console.error("üî• L·ªói khi th√™m khuy·∫øn m√£i:", error);
    res.status(500).json({ message: "L·ªói server khi th√™m khuy·∫øn m√£i!" });
  }
};


// üü¢ C·∫≠p nh·∫≠t khuy·∫øn m√£i
const updatePromotion = async (req, res) => {
  try {
    const { promotionId } = req.params;

    if (Object.keys(req.body).length === 0) {
      return res.status(400).json({ message: "‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t!" });
    }

    const updatedPromotion = await Promotion.findByIdAndUpdate(
      promotionId,
      { ...req.body },
      { new: true, runValidators: true }
    );

    if (!updatedPromotion) {
      return res.status(404).json({ message: "‚ùå Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i!" });
    }

    res.json({ message: "‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!", promotion: updatedPromotion });
  } catch (error) {
    console.error("üî• L·ªói khi c·∫≠p nh·∫≠t khuy·∫øn m√£i:", error);
    res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t khuy·∫øn m√£i!" });
  }
};


// üü¢ X√≥a khuy·∫øn m√£i
const deletePromotion = async (req, res) => {
  try {
    const { promotionId } = req.params;

    if (!promotionId.match(/^[0-9a-fA-F]{24}$/)) {
      return res.status(400).json({ message: "‚ùå ID kh√¥ng h·ª£p l·ªá!" });
    }

    const deletedPromotion = await Promotion.findByIdAndDelete(promotionId);

    if (!deletedPromotion) {
      return res.status(404).json({ message: "‚ùå Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i!" });
    }

    res.status(200).json({ message: "‚úÖ X√≥a th√†nh c√¥ng!" });
  } catch (error) {
    console.error("üî• L·ªói khi x√≥a khuy·∫øn m√£i:", error);
    res.status(500).json({ message: "L·ªói server khi x√≥a!" });
  }
};



// üü¢ Export c√°c h√†m
module.exports = {
  getPromotions,
  getPromotionAsJson,
  getPromotionById,
  addPromotion,
  updatePromotion,
  deletePromotion,
};
