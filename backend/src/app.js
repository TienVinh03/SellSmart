const express = require("express");
<<<<<<< HEAD
const dotenv = require("dotenv");
const mongoose = require("mongoose");
const customerRoutes = require("./routes/CustomerRoutes"); // Import routes
const bodyParser = require("body-parser");
const path = require("path");

const connectDB = require("./config/db");

dotenv.config();

connectDB();

=======
const bodyParser = require("body-parser");
const path = require("path");
const cookieParser = require("cookie-parser");
const methodOverride = require("method-override");
const flash = require("connect-flash");
const session = require("express-session");
const connectDB = require("./config/db");
const routes = require("./routes");
// Kh·ªüi t·∫°o ·ª©ng d·ª•ng
>>>>>>> 020b47ca46b2e2cab43ec38af5437ee7a01f20e2
const app = express();

// C·∫•u h√¨nh EJS l√†m view engine
app.set("views", path.join(__dirname, "views")); // Th∆∞ m·ª•c ch·ª©a file EJS
app.set("view engine", "ejs");

// Middleware
app.use(bodyParser.json());
app.use(express.urlencoded({ extended: false })); // H·ªó tr·ª£ x·ª≠ l√Ω form
app.use(express.static(path.join(__dirname, "public"))); // T√†i nguy√™n tƒ©nh
<<<<<<< HEAD

// Import routes
app.use("/api", customerRoutes);

// Route hi·ªÉn th·ªã danh s√°ch kh√°ch h√†ng (ƒë·ªÉ d√πng trong EJS ho·∫∑c frontend)
app.get("/customers", async (req, res) => {
  try {
    const customers = await mongoose.model("Customer").find();
    res.render("customers", { customers }); // Render trang EJS (n·∫øu d√πng)
  } catch (error) {
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch kh√°ch h√†ng" });
  }
});

// Route x·ª≠ l√Ω form th√™m kh√°ch h√†ng t·ª´ frontend
app.post("/customers", async (req, res) => {
  try {
    const { fullName, phoneNumber, email, address, birthDate, avatar } = req.body;

    if (!fullName || !phoneNumber || !email) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }

    const newCustomer = new mongoose.model("Customer")({
      fullName,
      phoneNumber,
      email,
      address,
      birthDate,
      avatar,
    });

    await newCustomer.save();
    res.redirect("/customers"); // Sau khi th√™m, quay l·∫°i danh s√°ch
  } catch (error) {
    console.error("üî• L·ªói th√™m kh√°ch h√†ng:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi th√™m kh√°ch h√†ng!" });
  }
});


// Route x·ª≠ l√Ω form X√ìA kh√°ch h√†ng t·ª´ frontend
app.delete("/customers/delete/:id", async (req, res) => {
  try {
    const customerId = req.params.id;
    const Customer = mongoose.model("Customer");

    const deletedCustomer = await Customer.findByIdAndDelete(customerId);

    if (!deletedCustomer) {
      return res.status(404).json({ success: false, message: "Kh√°ch h√†ng kh√¥ng t·ªìn t·∫°i!" });
    }

    res.json({ success: true, message: "X√≥a kh√°ch h√†ng th√†nh c√¥ng!" });
  } catch (error) {
    console.error("üî• L·ªói x√≥a kh√°ch h√†ng:", error);
    res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß khi x√≥a kh√°ch h√†ng!" });
  }
});

app.put('/api/customers/:id', async (req, res) => {
  try {
      const { id } = req.params;
      const updateData = req.body;

      // N·∫øu birthDate r·ªóng, x√≥a n√≥ kh·ªèi d·ªØ li·ªáu c·∫≠p nh·∫≠t
      if (!updateData.birthDate) {
          delete updateData.birthDate;
      }

      const updatedCustomer = await Customer.findByIdAndUpdate(id, updateData, { new: true });

      res.json(updatedCustomer);
  } catch (error) {
      console.error("L·ªói c·∫≠p nh·∫≠t kh√°ch h√†ng:", error);
      res.status(500).json({ message: "L·ªói server" });
  }
});





// Middleware x·ª≠ l√Ω l·ªói
app.use((err, req, res, next) => {
  console.error("üî• Server Error:", err.stack);
  res.status(500).json({ message: "L·ªói m√°y ch·ªß n·ªôi b·ªô!" });
});

// L·∫Øng nghe c·ªïng
app.listen(port, () => {
  console.log(`üöÄ Server is running on http://localhost:${port}`);
=======

// C·∫•u h√¨nh cookie-parser
app.use(cookieParser());

// C·∫•u h√¨nh method-override
app.use(methodOverride("_method"));

// C·∫•u h√¨nh express-session
app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
  }),
);

// C·∫•u h√¨nh connect-flash
app.use(flash());

// Global variables
app.use((req, res, next) => {
  res.locals.success_msg = req.flash("success");
  res.locals.error_msg = req.flash("error");
  next();
});

// Import routes
routes(app);
// K·∫øt n·ªëi MongoDB
connectDB();
// L·∫Øng nghe c·ªïng
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
>>>>>>> 020b47ca46b2e2cab43ec38af5437ee7a01f20e2
});

module.exports = app;
