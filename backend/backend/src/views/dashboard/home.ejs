<%- include('../layouts/main.ejs') %>

<div class="main-content">
    <!-- Header Section -->
    <div class="dashboard-header">
        <h1>Tổng Quan</h1>
        <div class="period-selector">
            <button class="btn btn-outline-primary active" data-period="day">Ngày</button>
            <button class="btn btn-outline-primary" data-period="week">Tuần</button>
            <button class="btn btn-outline-primary" data-period="month">Tháng</button>
        </div>
    </div>

    <!-- Quick Stats Cards -->
    <div class="row stats-cards">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card stats-card h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Doanh Thu</h6>
                            <h3 class="mb-0" id="totalRevenue">0 ₫</h3>
                            <small class="text-success">+15% so với hôm qua</small>
                        </div>
                        <div class="stats-icon bg-primary">
                            <i class="fas fa-dollar-sign"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card stats-card h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Đơn Hàng</h6>
                            <h3 class="mb-0" id="totalOrders">0</h3>
                            <small class="text-success">+8% so với hôm qua</small>
                        </div>
                        <div class="stats-icon bg-warning">
                            <i class="fas fa-shopping-cart"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card stats-card h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Khách Hàng</h6>
                            <h3 class="mb-0" id="totalCustomers">0</h3>
                            <small class="text-success">+12% so với hôm qua</small>
                        </div>
                        <div class="stats-icon bg-success">
                            <i class="fas fa-users"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card stats-card h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Sản Phẩm</h6>
                            <h3 class="mb-0" id="totalProducts">0</h3>
                            <small class="text-success">+5% so với hôm qua</small>
                        </div>
                        <div class="stats-icon bg-info">
                            <i class="fas fa-box"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="row">
        <!-- Revenue Chart -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold">Biểu Đồ Doanh Thu</h6>
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            Thời Gian
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#">Hôm nay</a></li>
                            <li><a class="dropdown-item" href="#">Tuần này</a></li>
                            <li><a class="dropdown-item" href="#">Tháng này</a></li>
                        </ul>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="revenueChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Orders Distribution -->
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header">
                    <h6 class="m-0 font-weight-bold">Phân Bố Đơn Hàng</h6>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="orderDistributionChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Best Selling Products and Employee Performance -->
    <div class="row">
        <!-- Best Selling Products -->
        <div class="col-xl-6">
            <div class="card shadow mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold">Sản Phẩm Bán Chạy</h6>
                    <button class="btn btn-sm btn-primary">Xem tất cả</button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Sản phẩm</th>
                                    <th>Đã bán</th>
                                    <th>Doanh thu</th>
                                    <th>Tồn kho</th>
                                </tr>
                            </thead>
                            <tbody id="bestSellingProducts">
                                <tr>
                                    <td colspan="4" class="text-center">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Employee Performance -->
        <div class="col-xl-6">
            <div class="card shadow mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold">HIỆU SUẤT NHÂN VIÊN</h6>
                    <button class="btn btn-sm btn-primary">Xem tất cả</button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Nhân viên</th>
                                    <th>Chức vụ</th>
                                    <th>Đơn hàng</th>
                                    <th>Doanh số</th>
                                    <th>Tỷ lệ</th>
                                </tr>
                            </thead>
                            <tbody id="employeePerformanceTable">
                                <tr>
                                    <td colspan="5" class="text-center">Đang tải dữ liệu...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Real-time Monitoring and Payment Stats -->
    <div class="row">
        <!-- Real-time Monitoring -->
        <div class="col-xl-8">
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h5 class="card-title text-primary mb-4">THEO DÕI THỜI GIAN THỰC</h5>
                    <div class="row g-4">
                        <!-- Đơn hàng mới -->
                        <div class="col-md-4">
                            <div class="p-3 bg-white rounded shadow-sm h-100">
                                <h6 class="text-muted mb-2">Đơn hàng mới</h6>
                                <h3 class="mb-0 text-primary" id="rtNewOrders">0</h3>
                            </div>
                        </div>
                        <!-- Hoàn Thành -->
                        <div class="col-md-4">
                            <div class="p-3 bg-white rounded shadow-sm h-100">
                                <h6 class="text-muted mb-2">Hoàn Thành</h6>
                                <h3 class="mb-0 text-success" id="rtProcessing">0</h3>
                            </div>
                        </div>
                        <!-- Hủy -->
                        <div class="col-md-4">
                            <div class="p-3 bg-white rounded shadow-sm h-100">
                                <h6 class="text-muted mb-2">Hủy</h6>
                                <h3 class="mb-0 text-danger" id="rtCancelled">0</h3>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Payment Stats -->
        <div class="col-xl-4">
            <div class="card shadow mb-4">
                <div class="card-header">
                    <h6 class="m-0 font-weight-bold">Thống Kê Thanh Toán</h6>
                </div>
                <div class="card-body">
                    <div class="payment-stats">
                        <!-- Payment Methods -->
                        <div class="payment-method mb-4">
                            <h6 class="text-muted mb-3">Phương thức thanh toán</h6>
                            <div class="payment-method-list">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div class="d-flex align-items-center">
                                        <div class="payment-icon bg-primary">
                                            <i class="fas fa-money-bill-wave"></i>
                                        </div>
                                        <span class="ms-2">Tiền mặt</span>
                                    </div>
                                    <span class="fw-bold" id="cashAmount">0 ₫</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div class="d-flex align-items-center">
                                        <div class="payment-icon bg-success">
                                            <i class="fas fa-university"></i>
                                        </div>
                                        <span class="ms-2">Chuyển khoản</span>
                                    </div>
                                    <span class="fw-bold" id="bankAmount">0 ₫</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        <div class="payment-icon bg-info">
                                            <i class="fas fa-wallet"></i>
                                        </div>
                                        <span class="ms-2">Ví điện tử</span>
                                    </div>
                                    <span class="fw-bold" id="eWalletAmount">0 ₫</span>
                                </div>
                            </div>
                        </div>

                        <!-- Payment Status -->
                        <div class="payment-status">
                            <h6 class="text-muted mb-3">Trạng thái thanh toán</h6>
                            <div class="status-cards">
                                <div class="status-card bg-success-light mb-2">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span>Đã thanh toán</span>
                                        <span class="fw-bold" id="paidCount">0</span>
                                    </div>
                                    <div class="progress mt-2">
                                        <div class="progress-bar bg-success" role="progressbar" style="width: 0%" id="paidProgress"></div>
                                    </div>
                                </div>
                                <div class="status-card bg-warning-light">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span>Chưa thanh toán</span>
                                        <span class="fw-bold" id="unpaidCount">0</span>
                                    </div>
                                    <div class="progress mt-2">
                                        <div class="progress-bar bg-warning" role="progressbar" style="width: 0%" id="unpaidProgress"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Custom CSS -->
<style>
.dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding: 1rem 0;
}

.period-selector .btn {
    margin-left: 0.5rem;
}

.stats-card {
    border: none;
    border-radius: 10px;
    box-shadow: 0 0.15rem 1.75rem rgba(0, 0, 0, 0.15);
    transition: transform 0.3s ease;
}

.stats-card:hover {
    transform: translateY(-5px);
}

.stats-icon {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.stats-icon i {
    color: white;
    font-size: 1.5rem;
}

.bg-primary { background-color: #4e73df; }
.bg-success { background-color: #1cc88a; }
.bg-warning { background-color: #f6c23e; }
.bg-info { background-color: #36b9cc; }

.chart-container {
    position: relative;
    height: 300px;
    width: 100%;
}

.real-time-stats .rt-stat {
    background: #f8f9fc;
    padding: 1rem;
    border-radius: 8px;
    text-align: center;
}

.real-time-stats .rt-stat h4 {
    font-size: 0.9rem;
    color: #5a5c69;
    margin-bottom: 0.5rem;
}

.real-time-stats .rt-stat p {
    font-size: 1.5rem;
    font-weight: bold;
    margin: 0;
    color: #4e73df;
}

.real-time-chart {
    margin-top: 2rem;
    height: 200px;
}

.payment-stats {
    padding: 0.5rem;
}

.payment-icon {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
}

.payment-icon i {
    font-size: 1rem;
}

.status-card {
    padding: 0.75rem;
    border-radius: 8px;
}

.bg-success-light {
    background-color: rgba(28, 200, 138, 0.1);
}

.bg-warning-light {
    background-color: rgba(246, 194, 62, 0.1);
}

.progress {
    height: 6px;
    border-radius: 3px;
    background-color: rgba(0, 0, 0, 0.05);
}

.table {
    font-size: 0.9rem;
}

.table th {
    font-weight: 600;
    border-top: none;
}

.card {
    border: none;
    margin-bottom: 1.5rem;
    box-shadow: 0 0.15rem 1.75rem rgba(0, 0, 0, 0.15);
    border-radius: 10px;
}

.card-header {
    background-color: white;
    border-bottom: 1px solid rgba(0,0,0,0.125);
    padding: 1rem 1.25rem;
}

.card-header h6 {
    color: #4e73df;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.dropdown-toggle::after {
    display: none;
}

@media (max-width: 768px) {
    .dashboard-header {
        flex-direction: column;
        align-items: flex-start;
    }

    .period-selector {
        margin-top: 1rem;
    }

    .real-time-stats .rt-stat {
        margin-bottom: 1rem;
    }
}
</style>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Custom JavaScript -->
<script>
// Format currency function
function formatCurrency(amount) {
    if (amount >= 1000000) {
        const millions = Math.floor(amount / 1000000);
        const remainder = amount % 1000000;
        if (remainder === 0) {
            return `${millions}tr`;
        }
        const decimal = Math.floor(remainder / 100000) / 10;
        return `${millions},${decimal}tr`;
    }
    return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount);
}

// Biến lưu trữ biểu đồ doanh thu
let revenueChart = null;

// Hàm cập nhật biểu đồ doanh thu
async function updateRevenueChart() {
    try {
        console.log('Fetching revenue data...');
        const response = await fetch('/orders/daily-revenue');
        const data = await response.json();

        if (data.status !== 'Ok' || !data.data) {
            console.error('Error fetching revenue data:', data);
            return;
        }

        const ctx = document.getElementById('revenueChart').getContext('2d');
        
        // Định dạng lại nhãn giờ
        const labels = data.data.labels.map(hour => {
            const hourNum = parseInt(hour);
            return `${hourNum}h`;
        });

        // Hủy biểu đồ cũ nếu tồn tại
        if (revenueChart) {
            revenueChart.destroy();
        }

        // Tạo gradient cho background
        const gradient = ctx.createLinearGradient(0, 0, 0, 400);
        gradient.addColorStop(0, 'rgba(78, 115, 223, 0.2)');
        gradient.addColorStop(1, 'rgba(78, 115, 223, 0)');

        revenueChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Doanh thu',
                    data: data.data.revenue,
                    backgroundColor: 'rgba(78, 115, 223, 0.8)',
                    borderColor: 'rgba(78, 115, 223, 1)',
                    borderWidth: 1,
                    barThickness: 20,
                    fill: true,
                    backgroundColor: gradient
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Doanh thu trong ngày',
                        font: {
                            size: 16,
                            weight: 'bold'
                        },
                        padding: 20
                    },
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleFont: {
                            size: 14
                        },
                        bodyFont: {
                            size: 13
                        },
                        padding: 12,
                        displayColors: false,
                        callbacks: {
                            label: function(context) {
                                return 'Doanh thu: ' + formatCurrency(context.raw);
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        grid: {
                            display: false
                        },
                        ticks: {
                            font: {
                                size: 12,
                                weight: '500'
                            },
                            color: '#666'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)',
                            drawBorder: false
                        },
                        ticks: {
                            font: {
                                size: 12,
                                weight: '500'
                            },
                            color: '#666',
                            callback: function(value) {
                                return formatCurrency(value);
                            }
                        }
                    }
                },
                layout: {
                    padding: {
                        left: 10,
                        right: 25,
                        top: 25,
                        bottom: 10
                    }
                }
            }
        });

        // Cập nhật thông tin tổng quan
        const totalRevenueElement = document.getElementById('totalRevenue');
        if (totalRevenueElement) {
            totalRevenueElement.textContent = formatCurrency(data.data.totalRevenue);
        }

        console.log('Revenue chart updated successfully');
    } catch (error) {
        console.error('Error updating revenue chart:', error);
    }
}

// Function to fetch and display best selling products
async function fetchBestSellingProducts() {
    try {
        const response = await fetch('/products/sales');
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();
        
        if (data.status === "Ok") {
            const products = data.data;
            const tbody = document.getElementById('bestSellingProducts');
            tbody.innerHTML = ''; // Clear existing content

            if (products.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="4" class="text-center">
                            Chưa có sản phẩm nào được bán
                        </td>
                    </tr>
                `;
                return;
            }

            // Take top 10 products (already sorted by API)
            const topProducts = products.slice(0, 10);

            topProducts.forEach(product => {
                // Handle image path
                let imagePath = '/images/default-product.png'; // Default image path
                if (product.thumbnail) {
                    if (product.thumbnail.startsWith('/uploads/')) {
                        imagePath = product.thumbnail;
                    } else if (product.thumbnail.startsWith('/images/')) {
                        imagePath = product.thumbnail;
                    } else {
                        imagePath = `/uploads/products/${product.thumbnail}`;
                    }
                }

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <div class="d-flex align-items-center">
                            <img src="${imagePath}" 
                                 alt="${product.name}" 
                                 class="product-thumbnail me-2"
                                 style="width: 40px; height: 40px; object-fit: cover; border-radius: 4px;"
                                 onerror="this.onerror=null; this.src='/images/default-product.png'">
                            <span>${product.name}</span>
                        </div>
                    </td>
                    <td>${product.totalSold}</td>
                    <td>${formatCurrency(product.revenue)}</td>
                    <td>
                        <span class="badge ${product.inventory > 10 ? 'bg-success' : product.inventory > 0 ? 'bg-warning' : 'bg-danger'}">
                            ${product.inventory}
                        </span>
                    </td>
                `;
                tbody.appendChild(row);
            });
        } else {
            throw new Error('Failed to fetch products');
        }
    } catch (error) {
        console.error('Error fetching best selling products:', error);
        document.getElementById('bestSellingProducts').innerHTML = `
            <tr>
                <td colspan="4" class="text-center text-danger">
                    Không thể tải dữ liệu sản phẩm bán chạy
                </td>
            </tr>
        `;
    }
}

// Add styles for product thumbnail
const style = document.createElement('style');
style.textContent = `
    .product-thumbnail {
        width: 40px;
        height: 40px;
        object-fit: cover;
        border-radius: 4px;
    }
`;
document.head.appendChild(style);

// Function to fetch dashboard statistics
async function fetchDashboardStats() {
    try {
        const response = await fetch('/products/dashboard-stats');
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();
        
        if (data.status === "Ok") {
            const stats = data.data;
            
            // Cập nhật doanh thu
            const totalRevenueElement = document.getElementById('totalRevenue');
            totalRevenueElement.textContent = formatCurrency(stats.totalRevenue);
            updateChangePercentage(totalRevenueElement, stats.percentageChanges.revenue);

            // Cập nhật số đơn hàng
            const totalOrdersElement = document.getElementById('totalOrders');
            totalOrdersElement.textContent = stats.totalOrders;
            updateChangePercentage(totalOrdersElement, stats.percentageChanges.orders);

            // Cập nhật số khách hàng
            const totalCustomersElement = document.getElementById('totalCustomers');
            totalCustomersElement.textContent = stats.totalCustomers;
            updateChangePercentage(totalCustomersElement, stats.percentageChanges.customers);

            // Cập nhật số sản phẩm
            const totalProductsElement = document.getElementById('totalProducts');
            totalProductsElement.textContent = stats.totalProducts;
            updateChangePercentage(totalProductsElement, stats.percentageChanges.products);
        }
    } catch (error) {
        console.error('Error fetching dashboard stats:', error);
    }
}

// Hàm hỗ trợ cập nhật phần trăm thay đổi
function updateChangePercentage(element, percentage) {
    const changeElement = element.nextElementSibling;
    if (changeElement) {
        const change = parseInt(percentage);
        changeElement.textContent = `${change > 0 ? '+' : ''}${change}% so với hôm qua`;
        changeElement.className = change >= 0 ? 'text-success' : 'text-danger';
    }
}

// Function to fetch and display employee performance
async function fetchEmployeePerformance() {
    try {
        console.log('Fetching employee performance data...');
        const response = await fetch('/orders/employee-performance');
        console.log('Response status:', response.status);
        const result = await response.json();
        console.log('Employee performance data:', result);

        const tableBody = document.getElementById('employeePerformanceTable');
        
        if (!result.data || !result.data.employees || result.data.employees.length === 0) {
            console.log('No employee performance data found');
            tableBody.innerHTML = '<tr><td colspan="5" class="text-center">Không có dữ liệu hiệu suất nhân viên</td></tr>';
            return;
        }

        let html = '';
        result.data.employees.forEach(employee => {
            console.log('Processing employee:', employee);
            const contribution = (employee.performance?.contribution || 0);
            html += `
                <tr>
                    <td>${employee.fullName || 'N/A'}</td>
                    <td>${employee.position || 'Nhân viên bán hàng'}</td>
                    <td>${employee.orderCount || 0}</td>
                    <td>${formatCurrency(employee.totalRevenue || 0)}</td>
                    <td>
                        <div class="progress" style="height: 6px;">
                            <div class="progress-bar bg-success" role="progressbar" 
                                 style="width: ${contribution}%" 
                                 aria-valuenow="${contribution}" 
                                 aria-valuemin="0" 
                                 aria-valuemax="100">
                            </div>
                        </div>
                        <small class="fw-bold">${contribution}%</small>
                    </td>
                </tr>
            `;
        });
        
        console.log('Updating table with HTML:', html);
        tableBody.innerHTML = html;
    } catch (error) {
        console.error('Error fetching employee performance:', error);
        const tableBody = document.getElementById('employeePerformanceTable');
        tableBody.innerHTML = '<tr><td colspan="5" class="text-center text-danger">Lỗi khi tải dữ liệu: ' + error.message + '</td></tr>';
    }
}

// Update payment statistics
async function updatePaymentStats() {
    console.log('=== STARTING PAYMENT STATS UPDATE ===');
    try {
        console.log('1. Initiating fetch request to /orders/payment-stats');
        const response = await fetch('http://localhost:5000/orders/payment-stats', {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        });
        
        console.log('2. Response received:', {
            status: response.status,
            ok: response.ok,
            statusText: response.statusText,
            headers: Object.fromEntries(response.headers.entries())
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);
        }
        
        console.log('3. Parsing response data...');
        const text = await response.text();
        console.log('Raw response:', text);
        
        const data = JSON.parse(text);
        console.log('4. Parsed data:', JSON.stringify(data, null, 2));
        
        if (data.status === "Ok") {
            const stats = data.data;
            console.log('5. Processing payment stats:', JSON.stringify(stats, null, 2));
            
            // Cập nhật số tiền theo phương thức thanh toán
            const cashAmount = stats.methods.cash || 0;
            const bankAmount = stats.methods.bank || 0;
            const eWalletAmount = stats.methods.eWallet || 0;
            
            console.log('6. Updating payment methods:', {
                cash: cashAmount,
                bank: bankAmount,
                eWallet: eWalletAmount
            });

            document.getElementById('cashAmount').textContent = formatCurrency(cashAmount);
            document.getElementById('bankAmount').textContent = formatCurrency(bankAmount);
            document.getElementById('eWalletAmount').textContent = formatCurrency(eWalletAmount);

            // Cập nhật trạng thái thanh toán
            const paidCount = stats.status.paid || 0;
            const unpaidCount = stats.status.unpaid || 0;
            const total = paidCount + unpaidCount;

            console.log('7. Updating payment status:', {
                paid: paidCount,
                unpaid: unpaidCount,
                total: total
            });

            document.getElementById('paidCount').textContent = paidCount;
            document.getElementById('unpaidCount').textContent = unpaidCount;

            // Tính và cập nhật phần trăm
            const paidPercentage = total > 0 ? (paidCount / total * 100).toFixed(1) : 0;
            const unpaidPercentage = total > 0 ? (unpaidCount / total * 100).toFixed(1) : 0;

            console.log('8. Updating progress bars:', {
                paidPercentage,
                unpaidPercentage
            });

            document.getElementById('paidProgress').style.width = `${paidPercentage}%`;
            document.getElementById('unpaidProgress').style.width = `${unpaidPercentage}%`;

            // Thêm tooltip hiển thị phần trăm
            document.getElementById('paidCount').title = `${paidPercentage}%`;
            document.getElementById('unpaidCount').title = `${unpaidPercentage}%`;
            
            console.log('9. Payment stats update completed successfully');
        } else {
            console.error('Invalid response format:', data);
            throw new Error('Invalid response format');
        }
    } catch (error) {
        console.error('Error in updatePaymentStats:', error);
        console.error('Error details:', {
            name: error.name,
            message: error.message,
            stack: error.stack
        });
        
        // Reset all values to 0 and show formatted currency
        document.getElementById('cashAmount').textContent = formatCurrency(0);
        document.getElementById('bankAmount').textContent = formatCurrency(0);
        document.getElementById('eWalletAmount').textContent = formatCurrency(0);
        document.getElementById('paidCount').textContent = '0';
        document.getElementById('unpaidCount').textContent = '0';
        document.getElementById('paidProgress').style.width = '0%';
        document.getElementById('unpaidProgress').style.width = '0%';
    } finally {
        console.log('=== PAYMENT STATS UPDATE COMPLETED ===');
    }
}

// Biến lưu trữ biểu đồ phân bố đơn hàng
let orderDistributionChart = null;

// Hàm cập nhật biểu đồ phân bố đơn hàng
async function updateOrderDistribution() {
    console.log('Đang cập nhật biểu đồ phân bố đơn hàng...');
    try {
        const response = await fetch('/orders/order-distribution');
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const result = await response.json();
        console.log('Dữ liệu nhận được từ API:', result);
        
        if (result.status === 'Ok' && result.data) {
            const data = result.data;
            console.log('Dữ liệu phân bố đơn hàng:', data);

            // Kiểm tra tính hợp lệ của dữ liệu
            if (!data.completed || !data.processing || !data.canceled || !data.pending) {
                throw new Error('Dữ liệu không đầy đủ');
            }

            // Chuẩn bị dữ liệu cho biểu đồ
            const chartData = {
                labels: [ 'Hoàn thành', 'Đã hủy', 'Chờ xử lý'],
                counts: [
                    data.processing.count || 0,
                    data.canceled.count || 0,
                    data.pending.count || 0
                ],
                percentages: [
                    parseFloat(data.processing.percentage) || 0,
                    parseFloat(data.canceled.percentage) || 0,
                    parseFloat(data.pending.percentage) || 0
                ]
            };

            console.log('Dữ liệu đã xử lý:', chartData);

            // Cập nhật hoặc tạo mới biểu đồ
            const ctx = document.getElementById('orderDistributionChart');
            if (ctx) {
                // Hủy biểu đồ cũ nếu tồn tại
                if (orderDistributionChart) {
                    orderDistributionChart.destroy();
                }

                // Tạo biểu đồ mới
                orderDistributionChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: chartData.labels,
                        datasets: [{
                            data: chartData.percentages,
                            backgroundColor: [ '#f6c23e', '#e74a3b', '#4e73df'],
                            hoverBackgroundColor: [ '#dda20a', '#be2617', '#2e59d9'],
                            hoverBorderColor: "rgba(234, 236, 244, 1)",
                        }]
                    },
                    options: {
                        maintainAspectRatio: false,
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const dataIndex = context.dataIndex;
                                        const percentage = chartData.percentages[dataIndex].toFixed(1);
                                        const count = chartData.counts[dataIndex];
                                        return `${chartData.labels[dataIndex]}: ${percentage}% (${count} đơn)`;
                                    }
                                }
                            },
                            legend: {
                                display: true,
                                position: 'bottom',
                                labels: {
                                    font: {
                                        size: 12
                                    }
                                }
                            },
                            title: {
                                display: true,
                                text: 'Phân bố đơn hàng trong ngày',
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                }
                            }
                        },
                        cutout: '70%'
                    }
                });

                // Thêm tổng số đơn hàng vào giữa biểu đồ
                const totalOrders = chartData.counts.reduce((a, b) => a + b, 0);
                const centerText = {
                    id: 'centerText',
                    afterDraw(chart) {
                        const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
                        ctx.save();
                        ctx.font = 'bold 14px Arial';
                        ctx.fillStyle = '#666';
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';
                        ctx.fillText(`Tổng: ${totalOrders}`, width / 2 + left, height / 2 + top);
                        ctx.restore();
                    }
                };
                orderDistributionChart.options.plugins.centerText = centerText;
                
                console.log('Biểu đồ đã được cập nhật thành công');
            }
        } else {
            throw new Error('Dữ liệu không hợp lệ từ API');
        }
    } catch (error) {
        console.error('Lỗi khi cập nhật biểu đồ phân bố đơn hàng:', error);
        // Hiển thị thông báo lỗi trong biểu đồ
        const ctx = document.getElementById('orderDistributionChart');
        if (ctx && orderDistributionChart) {
            orderDistributionChart.destroy();
        }
        if (ctx) {
            const errorChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Lỗi'],
                    datasets: [{
                        data: [1],
                        backgroundColor: ['#e74a3b']
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            enabled: false
                        }
                    }
                }
            });
        }
    }
}

// Hàm cập nhật số liệu theo thời gian thực
async function updateRealTimeStats() {
    try {
        const response = await fetch('/orders/order-distribution');
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();
        
        if (data.status === 'Ok' && data.data) {
            // Cập nhật số liệu từ server
            document.getElementById('rtNewOrders').textContent = data.data.pending.count || 0;
            document.getElementById('rtProcessing').textContent = data.data.processing.count || 0;
            document.getElementById('rtCancelled').textContent = data.data.canceled.count || 0;
        }
    } catch (error) {
        console.error('Error updating real-time stats:', error);
    }
}

// Initialize everything when page loads
document.addEventListener('DOMContentLoaded', function() {
    console.log('=== DOM Content Loaded - Starting Dashboard Initialization ===');
    
    try {
        // Fetch initial data
        console.log('2. Fetching initial data...');
        updateRevenueChart().catch(err => console.error('Error updating revenue chart:', err));
        fetchBestSellingProducts().catch(err => console.error('Error fetching best selling products:', err));
        fetchDashboardStats().catch(err => console.error('Error fetching dashboard stats:', err));
        fetchEmployeePerformance().catch(err => console.error('Error fetching employee performance:', err));
        
        console.log('3. Fetching payment statistics...');
        updatePaymentStats().catch(err => console.error('Error updating payment stats:', err));
        
        // Set up intervals for updates
        console.log('4. Setting up update intervals...');
        setInterval(() => {
            console.log('Running periodic updates...');
            updateRevenueChart().catch(err => console.error('Error in periodic revenue update:', err));
            fetchBestSellingProducts().catch(err => console.error('Error in periodic best selling update:', err));
            fetchDashboardStats().catch(err => console.error('Error in periodic stats update:', err));
            fetchEmployeePerformance().catch(err => console.error('Error in periodic performance update:', err));
            updatePaymentStats().catch(err => console.error('Error in periodic payment stats update:', err));
        }, 300000); // Every 5 minutes
        
        // Cập nhật biểu đồ khi trang tải xong và mỗi 5 phút
        updateOrderDistribution();
        setInterval(updateOrderDistribution, 300000); // 5 phút = 300000ms
        
        // Cập nhật số liệu khi trang tải xong và mỗi 5 giây
        updateRealTimeStats();
        setInterval(updateRealTimeStats, 5000);
        
        console.log('=== Dashboard Initialization Completed ===');
    } catch (error) {
        console.error('Critical error during dashboard initialization:', error);
    }
});
</script>

